lots_of_real_code.c:1:0: keyword struct
lots_of_real_code.c:1:7: identifier course
lots_of_real_code.c:2:0: punctuator {
lots_of_real_code.c:3:2: keyword int
lots_of_real_code.c:3:6: identifier marks
lots_of_real_code.c:3:11: punctuator ;
lots_of_real_code.c:4:2: keyword char
lots_of_real_code.c:4:7: identifier subject
lots_of_real_code.c:4:14: punctuator [
lots_of_real_code.c:4:15: constant 30
lots_of_real_code.c:4:17: punctuator ]
lots_of_real_code.c:4:18: punctuator ;
lots_of_real_code.c:5:0: punctuator }
lots_of_real_code.c:5:1: punctuator ;
lots_of_real_code.c:7:0: keyword int
lots_of_real_code.c:7:4: identifier main
lots_of_real_code.c:7:8: punctuator (
lots_of_real_code.c:7:9: punctuator )
lots_of_real_code.c:8:0: punctuator {
lots_of_real_code.c:9:2: keyword struct
lots_of_real_code.c:9:9: identifier course
lots_of_real_code.c:9:16: punctuator *
lots_of_real_code.c:9:17: identifier ptr
lots_of_real_code.c:9:20: punctuator ;
lots_of_real_code.c:10:2: keyword int
lots_of_real_code.c:10:6: identifier i
lots_of_real_code.c:10:7: punctuator ,
lots_of_real_code.c:10:9: identifier noOfRecords
lots_of_real_code.c:10:20: punctuator ;
lots_of_real_code.c:11:2: identifier printf
lots_of_real_code.c:11:8: punctuator (
lots_of_real_code.c:11:9: string-literal "Enter number of records: "
lots_of_real_code.c:11:36: punctuator )
lots_of_real_code.c:11:37: punctuator ;
lots_of_real_code.c:12:2: identifier scanf
lots_of_real_code.c:12:7: punctuator (
lots_of_real_code.c:12:8: string-literal "%d"
lots_of_real_code.c:12:12: punctuator ,
lots_of_real_code.c:12:14: punctuator &
lots_of_real_code.c:12:15: identifier noOfRecords
lots_of_real_code.c:12:26: punctuator )
lots_of_real_code.c:12:27: punctuator ;
lots_of_real_code.c:15:2: identifier ptr
lots_of_real_code.c:15:6: punctuator =
lots_of_real_code.c:15:8: punctuator (
lots_of_real_code.c:15:9: keyword struct
lots_of_real_code.c:15:16: identifier course
lots_of_real_code.c:15:22: punctuator *
lots_of_real_code.c:15:23: punctuator )
lots_of_real_code.c:15:25: identifier malloc
lots_of_real_code.c:15:32: punctuator (
lots_of_real_code.c:15:33: identifier noOfRecords
lots_of_real_code.c:15:45: punctuator *
lots_of_real_code.c:15:47: keyword sizeof
lots_of_real_code.c:15:53: punctuator (
lots_of_real_code.c:15:54: keyword struct
lots_of_real_code.c:15:61: identifier course
lots_of_real_code.c:15:67: punctuator )
lots_of_real_code.c:15:68: punctuator )
lots_of_real_code.c:15:69: punctuator ;
lots_of_real_code.c:17:2: keyword for
lots_of_real_code.c:17:5: punctuator (
lots_of_real_code.c:17:6: identifier i
lots_of_real_code.c:17:8: punctuator =
lots_of_real_code.c:17:10: constant 0
lots_of_real_code.c:17:11: punctuator ;
lots_of_real_code.c:17:13: identifier i
lots_of_real_code.c:17:15: punctuator <
lots_of_real_code.c:17:17: identifier noOfRecords
lots_of_real_code.c:17:28: punctuator ;
lots_of_real_code.c:17:30: punctuator ++
lots_of_real_code.c:17:32: identifier i
lots_of_real_code.c:17:33: punctuator )
lots_of_real_code.c:18:2: punctuator {
lots_of_real_code.c:19:4: identifier printf
lots_of_real_code.c:19:10: punctuator (
lots_of_real_code.c:19:11: string-literal "Enter name of the subject and marks respectively:\n"
lots_of_real_code.c:19:64: punctuator )
lots_of_real_code.c:19:65: punctuator ;
lots_of_real_code.c:20:4: identifier scanf
lots_of_real_code.c:20:9: punctuator (
lots_of_real_code.c:20:10: string-literal "%s %d"
lots_of_real_code.c:20:17: punctuator ,
lots_of_real_code.c:20:19: punctuator &
lots_of_real_code.c:20:20: punctuator (
lots_of_real_code.c:20:21: identifier ptr
lots_of_real_code.c:20:24: punctuator +
lots_of_real_code.c:20:25: identifier i
lots_of_real_code.c:20:26: punctuator )
lots_of_real_code.c:20:27: punctuator ->
lots_of_real_code.c:20:29: identifier subject
lots_of_real_code.c:20:36: punctuator ,
lots_of_real_code.c:20:38: punctuator &
lots_of_real_code.c:20:39: punctuator (
lots_of_real_code.c:20:40: identifier ptr
lots_of_real_code.c:20:43: punctuator +
lots_of_real_code.c:20:44: identifier i
lots_of_real_code.c:20:45: punctuator )
lots_of_real_code.c:20:46: punctuator ->
lots_of_real_code.c:20:48: identifier marks
lots_of_real_code.c:20:53: punctuator )
lots_of_real_code.c:20:54: punctuator ;
lots_of_real_code.c:21:2: punctuator }
lots_of_real_code.c:23:2: identifier printf
lots_of_real_code.c:23:8: punctuator (
lots_of_real_code.c:23:9: string-literal "Displaying Information:\n"
lots_of_real_code.c:23:36: punctuator )
lots_of_real_code.c:23:37: punctuator ;
lots_of_real_code.c:25:2: keyword for
lots_of_real_code.c:25:5: punctuator (
lots_of_real_code.c:25:6: identifier i
lots_of_real_code.c:25:8: punctuator =
lots_of_real_code.c:25:10: constant 0
lots_of_real_code.c:25:11: punctuator ;
lots_of_real_code.c:25:13: identifier i
lots_of_real_code.c:25:15: punctuator <
lots_of_real_code.c:25:17: identifier noOfRecords
lots_of_real_code.c:25:29: punctuator ;
lots_of_real_code.c:25:31: punctuator ++
lots_of_real_code.c:25:33: identifier i
lots_of_real_code.c:25:34: punctuator )
lots_of_real_code.c:26:4: identifier printf
lots_of_real_code.c:26:10: punctuator (
lots_of_real_code.c:26:11: string-literal "%s\t%d\n"
lots_of_real_code.c:26:21: punctuator ,
lots_of_real_code.c:26:23: punctuator (
lots_of_real_code.c:26:24: identifier ptr
lots_of_real_code.c:26:27: punctuator +
lots_of_real_code.c:26:28: identifier i
lots_of_real_code.c:26:29: punctuator )
lots_of_real_code.c:26:30: punctuator ->
lots_of_real_code.c:26:32: identifier subject
lots_of_real_code.c:26:39: punctuator ,
lots_of_real_code.c:26:41: punctuator (
lots_of_real_code.c:26:42: identifier ptr
lots_of_real_code.c:26:45: punctuator +
lots_of_real_code.c:26:46: identifier i
lots_of_real_code.c:26:47: punctuator )
lots_of_real_code.c:26:48: punctuator ->
lots_of_real_code.c:26:50: identifier marks
lots_of_real_code.c:26:55: punctuator )
lots_of_real_code.c:26:56: punctuator ;
lots_of_real_code.c:28:2: keyword return
lots_of_real_code.c:28:9: constant 0
lots_of_real_code.c:28:10: punctuator ;
lots_of_real_code.c:29:0: punctuator }
lots_of_real_code.c:31:0: keyword int
lots_of_real_code.c:31:4: identifier main
lots_of_real_code.c:31:8: punctuator (
lots_of_real_code.c:31:9: punctuator )
lots_of_real_code.c:32:0: punctuator {
lots_of_real_code.c:33:2: keyword int
lots_of_real_code.c:33:6: identifier i
lots_of_real_code.c:33:7: punctuator ,
lots_of_real_code.c:33:9: identifier j
lots_of_real_code.c:33:10: punctuator ,
lots_of_real_code.c:33:12: identifier rows
lots_of_real_code.c:33:16: punctuator ;
lots_of_real_code.c:35:2: identifier printf
lots_of_real_code.c:35:8: punctuator (
lots_of_real_code.c:35:9: string-literal "Enter number of rows: "
lots_of_real_code.c:35:33: punctuator )
lots_of_real_code.c:35:34: punctuator ;
lots_of_real_code.c:36:2: identifier scanf
lots_of_real_code.c:36:7: punctuator (
lots_of_real_code.c:36:8: string-literal "%d"
lots_of_real_code.c:36:12: punctuator ,
lots_of_real_code.c:36:13: punctuator &
lots_of_real_code.c:36:14: identifier rows
lots_of_real_code.c:36:18: punctuator )
lots_of_real_code.c:36:19: punctuator ;
lots_of_real_code.c:38:2: keyword for
lots_of_real_code.c:38:5: punctuator (
lots_of_real_code.c:38:6: identifier i
lots_of_real_code.c:38:7: punctuator =
lots_of_real_code.c:38:8: constant 1
lots_of_real_code.c:38:9: punctuator ;
lots_of_real_code.c:38:11: identifier i
lots_of_real_code.c:38:12: punctuator <=
lots_of_real_code.c:38:14: identifier rows
lots_of_real_code.c:38:18: punctuator ;
lots_of_real_code.c:38:20: punctuator ++
lots_of_real_code.c:38:22: identifier i
lots_of_real_code.c:38:23: punctuator )
lots_of_real_code.c:39:2: punctuator {
lots_of_real_code.c:40:4: keyword for
lots_of_real_code.c:40:7: punctuator (
lots_of_real_code.c:40:8: identifier j
lots_of_real_code.c:40:9: punctuator =
lots_of_real_code.c:40:10: constant 1
lots_of_real_code.c:40:11: punctuator ;
lots_of_real_code.c:40:13: identifier j
lots_of_real_code.c:40:14: punctuator <=
lots_of_real_code.c:40:16: identifier i
lots_of_real_code.c:40:17: punctuator ;
lots_of_real_code.c:40:19: punctuator ++
lots_of_real_code.c:40:21: identifier j
lots_of_real_code.c:40:22: punctuator )
lots_of_real_code.c:41:4: punctuator {
lots_of_real_code.c:42:6: identifier printf
lots_of_real_code.c:42:12: punctuator (
lots_of_real_code.c:42:13: string-literal "* "
lots_of_real_code.c:42:17: punctuator )
lots_of_real_code.c:42:18: punctuator ;
lots_of_real_code.c:43:4: punctuator }
lots_of_real_code.c:44:4: identifier printf
lots_of_real_code.c:44:10: punctuator (
lots_of_real_code.c:44:11: string-literal "\n"
lots_of_real_code.c:44:15: punctuator )
lots_of_real_code.c:44:16: punctuator ;
lots_of_real_code.c:45:2: punctuator }
lots_of_real_code.c:46:2: keyword return
lots_of_real_code.c:46:9: constant 0
lots_of_real_code.c:46:10: punctuator ;
lots_of_real_code.c:47:0: punctuator }
lots_of_real_code.c:49:0: keyword int
lots_of_real_code.c:49:4: identifier main
lots_of_real_code.c:49:8: punctuator (
lots_of_real_code.c:49:9: punctuator )
lots_of_real_code.c:50:0: punctuator {
lots_of_real_code.c:51:2: keyword int
lots_of_real_code.c:51:6: identifier i
lots_of_real_code.c:51:7: punctuator ,
lots_of_real_code.c:51:9: identifier j
lots_of_real_code.c:51:10: punctuator ,
lots_of_real_code.c:51:12: identifier rows
lots_of_real_code.c:51:16: punctuator ;
lots_of_real_code.c:53:2: identifier printf
lots_of_real_code.c:53:8: punctuator (
lots_of_real_code.c:53:9: string-literal "Enter number of rows: "
lots_of_real_code.c:53:33: punctuator )
lots_of_real_code.c:53:34: punctuator ;
lots_of_real_code.c:54:2: identifier scanf
lots_of_real_code.c:54:7: punctuator (
lots_of_real_code.c:54:8: string-literal "%d"
lots_of_real_code.c:54:12: punctuator ,
lots_of_real_code.c:54:13: punctuator &
lots_of_real_code.c:54:14: identifier rows
lots_of_real_code.c:54:18: punctuator )
lots_of_real_code.c:54:19: punctuator ;
lots_of_real_code.c:56:2: keyword for
lots_of_real_code.c:56:5: punctuator (
lots_of_real_code.c:56:6: identifier i
lots_of_real_code.c:56:7: punctuator =
lots_of_real_code.c:56:8: constant 1
lots_of_real_code.c:56:9: punctuator ;
lots_of_real_code.c:56:11: identifier i
lots_of_real_code.c:56:12: punctuator <=
lots_of_real_code.c:56:14: identifier rows
lots_of_real_code.c:56:18: punctuator ;
lots_of_real_code.c:56:20: punctuator ++
lots_of_real_code.c:56:22: identifier i
lots_of_real_code.c:56:23: punctuator )
lots_of_real_code.c:57:2: punctuator {
lots_of_real_code.c:58:4: keyword for
lots_of_real_code.c:58:7: punctuator (
lots_of_real_code.c:58:8: identifier j
lots_of_real_code.c:58:9: punctuator =
lots_of_real_code.c:58:10: constant 1
lots_of_real_code.c:58:11: punctuator ;
lots_of_real_code.c:58:13: identifier j
lots_of_real_code.c:58:14: punctuator <=
lots_of_real_code.c:58:16: identifier i
lots_of_real_code.c:58:17: punctuator ;
lots_of_real_code.c:58:19: punctuator ++
lots_of_real_code.c:58:21: identifier j
lots_of_real_code.c:58:22: punctuator )
lots_of_real_code.c:59:4: punctuator {
lots_of_real_code.c:60:6: identifier printf
lots_of_real_code.c:60:12: punctuator (
lots_of_real_code.c:60:13: string-literal "%d "
lots_of_real_code.c:60:18: punctuator ,
lots_of_real_code.c:60:19: identifier j
lots_of_real_code.c:60:20: punctuator )
lots_of_real_code.c:60:21: punctuator ;
lots_of_real_code.c:61:4: punctuator }
lots_of_real_code.c:62:4: identifier printf
lots_of_real_code.c:62:10: punctuator (
lots_of_real_code.c:62:11: string-literal "\n"
lots_of_real_code.c:62:15: punctuator )
lots_of_real_code.c:62:16: punctuator ;
lots_of_real_code.c:63:2: punctuator }
lots_of_real_code.c:64:2: keyword return
lots_of_real_code.c:64:9: constant 0
lots_of_real_code.c:64:10: punctuator ;
lots_of_real_code.c:65:0: punctuator }
lots_of_real_code.c:67:0: keyword int
lots_of_real_code.c:67:4: identifier main
lots_of_real_code.c:67:8: punctuator (
lots_of_real_code.c:67:9: punctuator )
lots_of_real_code.c:68:0: punctuator {
lots_of_real_code.c:69:2: keyword int
lots_of_real_code.c:69:6: identifier i
lots_of_real_code.c:69:7: punctuator ,
lots_of_real_code.c:69:9: identifier space
lots_of_real_code.c:69:14: punctuator ,
lots_of_real_code.c:69:16: identifier rows
lots_of_real_code.c:69:20: punctuator ,
lots_of_real_code.c:69:22: identifier k
lots_of_real_code.c:69:23: punctuator =
lots_of_real_code.c:69:24: constant 0
lots_of_real_code.c:69:25: punctuator ;
lots_of_real_code.c:71:2: identifier printf
lots_of_real_code.c:71:8: punctuator (
lots_of_real_code.c:71:9: string-literal "Enter number of rows: "
lots_of_real_code.c:71:33: punctuator )
lots_of_real_code.c:71:34: punctuator ;
lots_of_real_code.c:72:2: identifier scanf
lots_of_real_code.c:72:7: punctuator (
lots_of_real_code.c:72:8: string-literal "%d"
lots_of_real_code.c:72:12: punctuator ,
lots_of_real_code.c:72:13: punctuator &
lots_of_real_code.c:72:14: identifier rows
lots_of_real_code.c:72:18: punctuator )
lots_of_real_code.c:72:19: punctuator ;
lots_of_real_code.c:74:2: keyword for
lots_of_real_code.c:74:5: punctuator (
lots_of_real_code.c:74:6: identifier i
lots_of_real_code.c:74:7: punctuator =
lots_of_real_code.c:74:8: constant 1
lots_of_real_code.c:74:9: punctuator ;
lots_of_real_code.c:74:11: identifier i
lots_of_real_code.c:74:12: punctuator <=
lots_of_real_code.c:74:14: identifier rows
lots_of_real_code.c:74:18: punctuator ;
lots_of_real_code.c:74:20: punctuator ++
lots_of_real_code.c:74:22: identifier i
lots_of_real_code.c:74:23: punctuator ,
lots_of_real_code.c:74:25: identifier k
lots_of_real_code.c:74:26: punctuator =
lots_of_real_code.c:74:27: constant 0
lots_of_real_code.c:74:28: punctuator )
lots_of_real_code.c:75:2: punctuator {
lots_of_real_code.c:76:4: keyword for
lots_of_real_code.c:76:7: punctuator (
lots_of_real_code.c:76:8: identifier space
lots_of_real_code.c:76:13: punctuator =
lots_of_real_code.c:76:14: constant 1
lots_of_real_code.c:76:15: punctuator ;
lots_of_real_code.c:76:17: identifier space
lots_of_real_code.c:76:22: punctuator <=
lots_of_real_code.c:76:24: identifier rows
lots_of_real_code.c:76:28: punctuator -
lots_of_real_code.c:76:29: identifier i
lots_of_real_code.c:76:30: punctuator ;
lots_of_real_code.c:76:32: punctuator ++
lots_of_real_code.c:76:34: identifier space
lots_of_real_code.c:76:39: punctuator )
lots_of_real_code.c:77:4: punctuator {
lots_of_real_code.c:78:6: identifier printf
lots_of_real_code.c:78:12: punctuator (
lots_of_real_code.c:78:13: string-literal "  "
lots_of_real_code.c:78:17: punctuator )
lots_of_real_code.c:78:18: punctuator ;
lots_of_real_code.c:79:4: punctuator }
lots_of_real_code.c:81:4: keyword while
lots_of_real_code.c:81:9: punctuator (
lots_of_real_code.c:81:10: identifier k
lots_of_real_code.c:81:12: punctuator !=
lots_of_real_code.c:81:15: constant 2
lots_of_real_code.c:81:16: punctuator *
lots_of_real_code.c:81:17: identifier i
lots_of_real_code.c:81:18: constant -1
lots_of_real_code.c:81:20: punctuator )
lots_of_real_code.c:82:4: punctuator {
lots_of_real_code.c:83:6: identifier printf
lots_of_real_code.c:83:12: punctuator (
lots_of_real_code.c:83:13: string-literal "* "
lots_of_real_code.c:83:17: punctuator )
lots_of_real_code.c:83:18: punctuator ;
lots_of_real_code.c:84:6: punctuator ++
lots_of_real_code.c:84:8: identifier k
lots_of_real_code.c:84:9: punctuator ;
lots_of_real_code.c:85:4: punctuator }
lots_of_real_code.c:87:4: identifier printf
lots_of_real_code.c:87:10: punctuator (
lots_of_real_code.c:87:11: string-literal "\n"
lots_of_real_code.c:87:15: punctuator )
lots_of_real_code.c:87:16: punctuator ;
lots_of_real_code.c:88:2: punctuator }
lots_of_real_code.c:90:2: keyword return
lots_of_real_code.c:90:9: constant 0
lots_of_real_code.c:90:10: punctuator ;
lots_of_real_code.c:91:0: punctuator }
lots_of_real_code.c:93:0: keyword int
lots_of_real_code.c:93:4: identifier main
lots_of_real_code.c:93:8: punctuator (
lots_of_real_code.c:93:9: punctuator )
lots_of_real_code.c:94:0: punctuator {
lots_of_real_code.c:95:2: keyword int
lots_of_real_code.c:95:6: identifier i
lots_of_real_code.c:95:7: punctuator ,
lots_of_real_code.c:95:9: identifier space
lots_of_real_code.c:95:14: punctuator ,
lots_of_real_code.c:95:16: identifier rows
lots_of_real_code.c:95:20: punctuator ,
lots_of_real_code.c:95:22: identifier k
lots_of_real_code.c:95:23: punctuator =
lots_of_real_code.c:95:24: constant 0
lots_of_real_code.c:95:25: punctuator ,
lots_of_real_code.c:95:27: identifier count
lots_of_real_code.c:95:33: punctuator =
lots_of_real_code.c:95:35: constant 0
lots_of_real_code.c:95:36: punctuator ,
lots_of_real_code.c:95:38: identifier count1
lots_of_real_code.c:95:45: punctuator =
lots_of_real_code.c:95:47: constant 0
lots_of_real_code.c:95:48: punctuator ;
lots_of_real_code.c:97:2: identifier printf
lots_of_real_code.c:97:8: punctuator (
lots_of_real_code.c:97:9: string-literal "Enter number of rows: "
lots_of_real_code.c:97:33: punctuator )
lots_of_real_code.c:97:34: punctuator ;
lots_of_real_code.c:98:2: identifier scanf
lots_of_real_code.c:98:7: punctuator (
lots_of_real_code.c:98:8: string-literal "%d"
lots_of_real_code.c:98:12: punctuator ,
lots_of_real_code.c:98:13: punctuator &
lots_of_real_code.c:98:14: identifier rows
lots_of_real_code.c:98:18: punctuator )
lots_of_real_code.c:98:19: punctuator ;
lots_of_real_code.c:100:2: keyword for
lots_of_real_code.c:100:5: punctuator (
lots_of_real_code.c:100:6: identifier i
lots_of_real_code.c:100:7: punctuator =
lots_of_real_code.c:100:8: constant 1
lots_of_real_code.c:100:9: punctuator ;
lots_of_real_code.c:100:11: identifier i
lots_of_real_code.c:100:12: punctuator <=
lots_of_real_code.c:100:14: identifier rows
lots_of_real_code.c:100:18: punctuator ;
lots_of_real_code.c:100:20: punctuator ++
lots_of_real_code.c:100:22: identifier i
lots_of_real_code.c:100:23: punctuator )
lots_of_real_code.c:101:2: punctuator {
lots_of_real_code.c:102:4: keyword for
lots_of_real_code.c:102:7: punctuator (
lots_of_real_code.c:102:8: identifier space
lots_of_real_code.c:102:13: punctuator =
lots_of_real_code.c:102:14: constant 1
lots_of_real_code.c:102:15: punctuator ;
lots_of_real_code.c:102:17: identifier space
lots_of_real_code.c:102:23: punctuator <=
lots_of_real_code.c:102:26: identifier rows
lots_of_real_code.c:102:30: punctuator -
lots_of_real_code.c:102:31: identifier i
lots_of_real_code.c:102:32: punctuator ;
lots_of_real_code.c:102:34: punctuator ++
lots_of_real_code.c:102:36: identifier space
lots_of_real_code.c:102:41: punctuator )
lots_of_real_code.c:103:4: punctuator {
lots_of_real_code.c:104:6: identifier printf
lots_of_real_code.c:104:12: punctuator (
lots_of_real_code.c:104:13: string-literal "  "
lots_of_real_code.c:104:17: punctuator )
lots_of_real_code.c:104:18: punctuator ;
lots_of_real_code.c:105:6: punctuator ++
lots_of_real_code.c:105:8: identifier count
lots_of_real_code.c:105:13: punctuator ;
lots_of_real_code.c:106:4: punctuator }
lots_of_real_code.c:108:4: keyword while
lots_of_real_code.c:108:9: punctuator (
lots_of_real_code.c:108:10: identifier k
lots_of_real_code.c:108:12: punctuator !=
lots_of_real_code.c:108:15: constant 2
lots_of_real_code.c:108:16: punctuator *
lots_of_real_code.c:108:17: identifier i
lots_of_real_code.c:108:18: constant -1
lots_of_real_code.c:108:20: punctuator )
lots_of_real_code.c:109:4: punctuator {
lots_of_real_code.c:110:6: keyword if
lots_of_real_code.c:110:9: punctuator (
lots_of_real_code.c:110:10: identifier count
lots_of_real_code.c:110:16: punctuator <=
lots_of_real_code.c:110:19: identifier rows
lots_of_real_code.c:110:23: constant -1
lots_of_real_code.c:110:25: punctuator )
lots_of_real_code.c:111:6: punctuator {
lots_of_real_code.c:112:8: identifier printf
lots_of_real_code.c:112:14: punctuator (
lots_of_real_code.c:112:15: string-literal "%d "
lots_of_real_code.c:112:20: punctuator ,
lots_of_real_code.c:112:22: identifier i
lots_of_real_code.c:112:23: punctuator +
lots_of_real_code.c:112:24: identifier k
lots_of_real_code.c:112:25: punctuator )
lots_of_real_code.c:112:26: punctuator ;
lots_of_real_code.c:113:8: punctuator ++
lots_of_real_code.c:113:10: identifier count
lots_of_real_code.c:113:15: punctuator ;
lots_of_real_code.c:114:6: punctuator }
lots_of_real_code.c:115:6: keyword else
lots_of_real_code.c:116:6: punctuator {
lots_of_real_code.c:117:8: punctuator ++
lots_of_real_code.c:117:10: identifier count1
lots_of_real_code.c:117:16: punctuator ;
lots_of_real_code.c:118:8: identifier printf
lots_of_real_code.c:118:14: punctuator (
lots_of_real_code.c:118:15: string-literal "%d "
lots_of_real_code.c:118:20: punctuator ,
lots_of_real_code.c:118:22: punctuator (
lots_of_real_code.c:118:23: identifier i
lots_of_real_code.c:118:24: punctuator +
lots_of_real_code.c:118:25: identifier k
lots_of_real_code.c:118:26: constant -2
lots_of_real_code.c:118:28: punctuator *
lots_of_real_code.c:118:29: identifier count1
lots_of_real_code.c:118:35: punctuator )
lots_of_real_code.c:118:36: punctuator )
lots_of_real_code.c:118:37: punctuator ;
lots_of_real_code.c:119:6: punctuator }
lots_of_real_code.c:120:6: punctuator ++
lots_of_real_code.c:120:8: identifier k
lots_of_real_code.c:120:9: punctuator ;
lots_of_real_code.c:121:4: punctuator }
lots_of_real_code.c:122:4: identifier count1
lots_of_real_code.c:122:11: punctuator =
lots_of_real_code.c:122:13: identifier count
lots_of_real_code.c:122:19: punctuator =
lots_of_real_code.c:122:21: identifier k
lots_of_real_code.c:122:23: punctuator =
lots_of_real_code.c:122:25: constant 0
lots_of_real_code.c:122:26: punctuator ;
lots_of_real_code.c:124:4: identifier printf
lots_of_real_code.c:124:10: punctuator (
lots_of_real_code.c:124:11: string-literal "\n"
lots_of_real_code.c:124:15: punctuator )
lots_of_real_code.c:124:16: punctuator ;
lots_of_real_code.c:125:2: punctuator }
lots_of_real_code.c:126:2: keyword return
lots_of_real_code.c:126:9: constant 0
lots_of_real_code.c:126:10: punctuator ;
lots_of_real_code.c:127:0: punctuator }
lots_of_real_code.c:129:0: keyword int
lots_of_real_code.c:129:4: identifier main
lots_of_real_code.c:129:8: punctuator (
lots_of_real_code.c:129:9: punctuator )
lots_of_real_code.c:129:11: punctuator {
lots_of_real_code.c:130:2: identifier FILE
lots_of_real_code.c:130:7: punctuator *
lots_of_real_code.c:130:8: identifier fp
lots_of_real_code.c:130:10: punctuator ;
lots_of_real_code.c:131:2: keyword int
lots_of_real_code.c:131:6: identifier c
lots_of_real_code.c:131:7: punctuator ;
lots_of_real_code.c:132:2: identifier fp
lots_of_real_code.c:132:5: punctuator =
lots_of_real_code.c:132:7: identifier fopen
lots_of_real_code.c:132:12: punctuator (
lots_of_real_code.c:132:13: identifier __FILE__
lots_of_real_code.c:132:21: punctuator ,
lots_of_real_code.c:132:22: string-literal "r"
lots_of_real_code.c:132:25: punctuator )
lots_of_real_code.c:132:26: punctuator ;
lots_of_real_code.c:133:2: keyword do
lots_of_real_code.c:133:5: punctuator {
lots_of_real_code.c:134:4: identifier c
lots_of_real_code.c:134:6: punctuator =
lots_of_real_code.c:134:8: identifier getc
lots_of_real_code.c:134:12: punctuator (
lots_of_real_code.c:134:13: identifier fp
lots_of_real_code.c:134:15: punctuator )
lots_of_real_code.c:134:16: punctuator ;
lots_of_real_code.c:135:4: identifier putchar
lots_of_real_code.c:135:11: punctuator (
lots_of_real_code.c:135:12: identifier c
lots_of_real_code.c:135:13: punctuator )
lots_of_real_code.c:135:14: punctuator ;
lots_of_real_code.c:136:2: punctuator }
lots_of_real_code.c:137:2: keyword while
lots_of_real_code.c:137:7: punctuator (
lots_of_real_code.c:137:8: identifier c
lots_of_real_code.c:137:10: punctuator !=
lots_of_real_code.c:137:13: identifier EOF
lots_of_real_code.c:137:16: punctuator )
lots_of_real_code.c:137:17: punctuator ;
lots_of_real_code.c:138:2: identifier fclose
lots_of_real_code.c:138:8: punctuator (
lots_of_real_code.c:138:9: identifier fp
lots_of_real_code.c:138:11: punctuator )
lots_of_real_code.c:138:12: punctuator ;
lots_of_real_code.c:139:2: keyword return
lots_of_real_code.c:139:9: constant 0
lots_of_real_code.c:139:10: punctuator ;
lots_of_real_code.c:140:0: punctuator }
lots_of_real_code.c:142:0: keyword int
lots_of_real_code.c:142:4: identifier main
lots_of_real_code.c:142:8: punctuator (
lots_of_real_code.c:142:9: punctuator )
lots_of_real_code.c:143:0: punctuator {
lots_of_real_code.c:144:2: keyword int
lots_of_real_code.c:144:6: identifier low
lots_of_real_code.c:144:9: punctuator ,
lots_of_real_code.c:144:11: identifier high
lots_of_real_code.c:144:15: punctuator ,
lots_of_real_code.c:144:17: identifier i
lots_of_real_code.c:144:18: punctuator ,
lots_of_real_code.c:144:20: identifier flag
lots_of_real_code.c:144:24: punctuator ;
lots_of_real_code.c:145:2: identifier printf
lots_of_real_code.c:145:8: punctuator (
lots_of_real_code.c:145:9: string-literal "Enter two numbers(intervals): "
lots_of_real_code.c:145:41: punctuator )
lots_of_real_code.c:145:42: punctuator ;
lots_of_real_code.c:146:2: identifier scanf
lots_of_real_code.c:146:7: punctuator (
lots_of_real_code.c:146:8: string-literal "%d %d"
lots_of_real_code.c:146:15: punctuator ,
lots_of_real_code.c:146:17: punctuator &
lots_of_real_code.c:146:18: identifier low
lots_of_real_code.c:146:21: punctuator ,
lots_of_real_code.c:146:23: punctuator &
lots_of_real_code.c:146:24: identifier high
lots_of_real_code.c:146:28: punctuator )
lots_of_real_code.c:146:29: punctuator ;
lots_of_real_code.c:148:2: identifier printf
lots_of_real_code.c:148:8: punctuator (
lots_of_real_code.c:148:9: string-literal "Prime numbers between %d and %d are: "
lots_of_real_code.c:148:48: punctuator ,
lots_of_real_code.c:148:50: identifier low
lots_of_real_code.c:148:53: punctuator ,
lots_of_real_code.c:148:55: identifier high
lots_of_real_code.c:148:59: punctuator )
lots_of_real_code.c:148:60: punctuator ;
lots_of_real_code.c:150:2: keyword while
lots_of_real_code.c:150:8: punctuator (
lots_of_real_code.c:150:9: identifier low
lots_of_real_code.c:150:13: punctuator <
lots_of_real_code.c:150:15: identifier high
lots_of_real_code.c:150:19: punctuator )
lots_of_real_code.c:151:2: punctuator {
lots_of_real_code.c:152:4: identifier flag
lots_of_real_code.c:152:9: punctuator =
lots_of_real_code.c:152:11: constant 0
lots_of_real_code.c:152:12: punctuator ;
lots_of_real_code.c:154:4: keyword for
lots_of_real_code.c:154:7: punctuator (
lots_of_real_code.c:154:8: identifier i
lots_of_real_code.c:154:10: punctuator =
lots_of_real_code.c:154:12: constant 2
lots_of_real_code.c:154:13: punctuator ;
lots_of_real_code.c:154:15: identifier i
lots_of_real_code.c:154:17: punctuator <=
lots_of_real_code.c:154:20: identifier low
lots_of_real_code.c:154:23: punctuator /
lots_of_real_code.c:154:24: constant 2
lots_of_real_code.c:154:25: punctuator ;
lots_of_real_code.c:154:27: punctuator ++
lots_of_real_code.c:154:29: identifier i
lots_of_real_code.c:154:30: punctuator )
lots_of_real_code.c:155:4: punctuator {
lots_of_real_code.c:156:6: keyword if
lots_of_real_code.c:156:8: punctuator (
lots_of_real_code.c:156:9: identifier low
lots_of_real_code.c:156:13: punctuator %
lots_of_real_code.c:156:15: identifier i
lots_of_real_code.c:156:17: punctuator ==
lots_of_real_code.c:156:20: constant 0
lots_of_real_code.c:156:21: punctuator )
lots_of_real_code.c:157:6: punctuator {
lots_of_real_code.c:158:8: identifier flag
lots_of_real_code.c:158:13: punctuator =
lots_of_real_code.c:158:15: constant 1
lots_of_real_code.c:158:16: punctuator ;
lots_of_real_code.c:159:8: keyword break
lots_of_real_code.c:159:13: punctuator ;
lots_of_real_code.c:160:6: punctuator }
lots_of_real_code.c:161:4: punctuator }
lots_of_real_code.c:163:4: keyword if
lots_of_real_code.c:163:7: punctuator (
lots_of_real_code.c:163:8: identifier flag
lots_of_real_code.c:163:13: punctuator ==
lots_of_real_code.c:163:16: constant 0
lots_of_real_code.c:163:17: punctuator )
lots_of_real_code.c:164:6: identifier printf
lots_of_real_code.c:164:12: punctuator (
lots_of_real_code.c:164:13: string-literal "%d "
lots_of_real_code.c:164:18: punctuator ,
lots_of_real_code.c:164:20: identifier low
lots_of_real_code.c:164:23: punctuator )
lots_of_real_code.c:164:24: punctuator ;
lots_of_real_code.c:166:4: punctuator ++
lots_of_real_code.c:166:6: identifier low
lots_of_real_code.c:166:9: punctuator ;
lots_of_real_code.c:167:2: punctuator }
lots_of_real_code.c:169:2: keyword return
lots_of_real_code.c:169:9: constant 0
lots_of_real_code.c:169:10: punctuator ;
lots_of_real_code.c:170:0: punctuator }
lots_of_real_code.c:172:0: keyword int
lots_of_real_code.c:172:4: identifier main
lots_of_real_code.c:172:8: punctuator (
lots_of_real_code.c:172:9: punctuator )
lots_of_real_code.c:173:0: punctuator {
lots_of_real_code.c:174:2: keyword int
lots_of_real_code.c:174:6: identifier low
lots_of_real_code.c:174:9: punctuator ,
lots_of_real_code.c:174:11: identifier high
lots_of_real_code.c:174:15: punctuator ,
lots_of_real_code.c:174:17: identifier i
lots_of_real_code.c:174:18: punctuator ,
lots_of_real_code.c:174:20: identifier flag
lots_of_real_code.c:174:24: punctuator ,
lots_of_real_code.c:174:26: identifier temp
lots_of_real_code.c:174:30: punctuator ;
lots_of_real_code.c:175:2: identifier printf
lots_of_real_code.c:175:8: punctuator (
lots_of_real_code.c:175:9: string-literal "Enter two numbers(intevals): "
lots_of_real_code.c:175:40: punctuator )
lots_of_real_code.c:175:41: punctuator ;
lots_of_real_code.c:176:2: identifier scanf
lots_of_real_code.c:176:7: punctuator (
lots_of_real_code.c:176:8: string-literal "%d %d"
lots_of_real_code.c:176:15: punctuator ,
lots_of_real_code.c:176:17: punctuator &
lots_of_real_code.c:176:18: identifier low
lots_of_real_code.c:176:21: punctuator ,
lots_of_real_code.c:176:23: punctuator &
lots_of_real_code.c:176:24: identifier high
lots_of_real_code.c:176:28: punctuator )
lots_of_real_code.c:176:29: punctuator ;
lots_of_real_code.c:179:2: keyword if
lots_of_real_code.c:179:5: punctuator (
lots_of_real_code.c:179:6: identifier low
lots_of_real_code.c:179:10: punctuator >
lots_of_real_code.c:179:12: identifier high
lots_of_real_code.c:179:16: punctuator )
lots_of_real_code.c:179:18: punctuator {
lots_of_real_code.c:180:4: identifier temp
lots_of_real_code.c:180:9: punctuator =
lots_of_real_code.c:180:11: identifier low
lots_of_real_code.c:180:14: punctuator ;
lots_of_real_code.c:181:4: identifier low
lots_of_real_code.c:181:8: punctuator =
lots_of_real_code.c:181:10: identifier high
lots_of_real_code.c:181:14: punctuator ;
lots_of_real_code.c:182:4: identifier high
lots_of_real_code.c:182:9: punctuator =
lots_of_real_code.c:182:11: identifier temp
lots_of_real_code.c:182:15: punctuator ;
lots_of_real_code.c:183:2: punctuator }
lots_of_real_code.c:185:2: identifier printf
lots_of_real_code.c:185:8: punctuator (
lots_of_real_code.c:185:9: string-literal "Prime numbers between %d and %d are: "
lots_of_real_code.c:185:48: punctuator ,
lots_of_real_code.c:185:50: identifier low
lots_of_real_code.c:185:53: punctuator ,
lots_of_real_code.c:185:55: identifier high
lots_of_real_code.c:185:59: punctuator )
lots_of_real_code.c:185:60: punctuator ;
lots_of_real_code.c:187:2: keyword while
lots_of_real_code.c:187:8: punctuator (
lots_of_real_code.c:187:9: identifier low
lots_of_real_code.c:187:13: punctuator <
lots_of_real_code.c:187:15: identifier high
lots_of_real_code.c:187:19: punctuator )
lots_of_real_code.c:188:2: punctuator {
lots_of_real_code.c:189:4: identifier flag
lots_of_real_code.c:189:9: punctuator =
lots_of_real_code.c:189:11: constant 0
lots_of_real_code.c:189:12: punctuator ;
lots_of_real_code.c:191:4: keyword for
lots_of_real_code.c:191:7: punctuator (
lots_of_real_code.c:191:8: identifier i
lots_of_real_code.c:191:10: punctuator =
lots_of_real_code.c:191:12: constant 2
lots_of_real_code.c:191:13: punctuator ;
lots_of_real_code.c:191:15: identifier i
lots_of_real_code.c:191:17: punctuator <=
lots_of_real_code.c:191:20: identifier low
lots_of_real_code.c:191:23: punctuator /
lots_of_real_code.c:191:24: constant 2
lots_of_real_code.c:191:25: punctuator ;
lots_of_real_code.c:191:27: punctuator ++
lots_of_real_code.c:191:29: identifier i
lots_of_real_code.c:191:30: punctuator )
lots_of_real_code.c:192:4: punctuator {
lots_of_real_code.c:193:6: keyword if
lots_of_real_code.c:193:8: punctuator (
lots_of_real_code.c:193:9: identifier low
lots_of_real_code.c:193:13: punctuator %
lots_of_real_code.c:193:15: identifier i
lots_of_real_code.c:193:17: punctuator ==
lots_of_real_code.c:193:20: constant 0
lots_of_real_code.c:193:21: punctuator )
lots_of_real_code.c:194:6: punctuator {
lots_of_real_code.c:195:8: identifier flag
lots_of_real_code.c:195:13: punctuator =
lots_of_real_code.c:195:15: constant 1
lots_of_real_code.c:195:16: punctuator ;
lots_of_real_code.c:196:8: keyword break
lots_of_real_code.c:196:13: punctuator ;
lots_of_real_code.c:197:6: punctuator }
lots_of_real_code.c:198:4: punctuator }
lots_of_real_code.c:200:4: keyword if
lots_of_real_code.c:200:7: punctuator (
lots_of_real_code.c:200:8: identifier flag
lots_of_real_code.c:200:13: punctuator ==
lots_of_real_code.c:200:16: constant 0
lots_of_real_code.c:200:17: punctuator )
lots_of_real_code.c:201:6: identifier printf
lots_of_real_code.c:201:12: punctuator (
lots_of_real_code.c:201:13: string-literal "%d "
lots_of_real_code.c:201:18: punctuator ,
lots_of_real_code.c:201:20: identifier low
lots_of_real_code.c:201:23: punctuator )
lots_of_real_code.c:201:24: punctuator ;
lots_of_real_code.c:203:4: punctuator ++
lots_of_real_code.c:203:6: identifier low
lots_of_real_code.c:203:9: punctuator ;
lots_of_real_code.c:204:2: punctuator }
lots_of_real_code.c:206:2: keyword return
lots_of_real_code.c:206:9: constant 0
lots_of_real_code.c:206:10: punctuator ;
lots_of_real_code.c:207:0: punctuator }
lots_of_real_code.c:209:0: keyword int
lots_of_real_code.c:209:4: identifier main
lots_of_real_code.c:209:8: punctuator (
lots_of_real_code.c:209:9: punctuator )
lots_of_real_code.c:210:0: punctuator {
lots_of_real_code.c:211:2: keyword int
lots_of_real_code.c:211:6: identifier n1
lots_of_real_code.c:211:8: punctuator ,
lots_of_real_code.c:211:10: identifier n2
lots_of_real_code.c:211:12: punctuator ,
lots_of_real_code.c:211:14: identifier i
lots_of_real_code.c:211:15: punctuator ,
lots_of_real_code.c:211:17: identifier gcd
lots_of_real_code.c:211:20: punctuator ;
lots_of_real_code.c:213:2: identifier printf
lots_of_real_code.c:213:8: punctuator (
lots_of_real_code.c:213:9: string-literal "Enter two integers: "
lots_of_real_code.c:213:31: punctuator )
lots_of_real_code.c:213:32: punctuator ;
lots_of_real_code.c:214:2: identifier scanf
lots_of_real_code.c:214:7: punctuator (
lots_of_real_code.c:214:8: string-literal "%d %d"
lots_of_real_code.c:214:15: punctuator ,
lots_of_real_code.c:214:17: punctuator &
lots_of_real_code.c:214:18: identifier n1
lots_of_real_code.c:214:20: punctuator ,
lots_of_real_code.c:214:22: punctuator &
lots_of_real_code.c:214:23: identifier n2
lots_of_real_code.c:214:25: punctuator )
lots_of_real_code.c:214:26: punctuator ;
lots_of_real_code.c:216:2: keyword for
lots_of_real_code.c:216:5: punctuator (
lots_of_real_code.c:216:6: identifier i
lots_of_real_code.c:216:7: punctuator =
lots_of_real_code.c:216:8: constant 1
lots_of_real_code.c:216:9: punctuator ;
lots_of_real_code.c:216:11: identifier i
lots_of_real_code.c:216:13: punctuator <=
lots_of_real_code.c:216:16: identifier n1
lots_of_real_code.c:216:19: punctuator &&
lots_of_real_code.c:216:22: identifier i
lots_of_real_code.c:216:24: punctuator <=
lots_of_real_code.c:216:27: identifier n2
lots_of_real_code.c:216:29: punctuator ;
lots_of_real_code.c:216:31: punctuator ++
lots_of_real_code.c:216:33: identifier i
lots_of_real_code.c:216:34: punctuator )
lots_of_real_code.c:217:2: punctuator {
lots_of_real_code.c:219:4: keyword if
lots_of_real_code.c:219:6: punctuator (
lots_of_real_code.c:219:7: identifier n1
lots_of_real_code.c:219:9: punctuator %
lots_of_real_code.c:219:10: identifier i
lots_of_real_code.c:219:11: punctuator ==
lots_of_real_code.c:219:13: constant 0
lots_of_real_code.c:219:15: punctuator &&
lots_of_real_code.c:219:18: identifier n2
lots_of_real_code.c:219:20: punctuator %
lots_of_real_code.c:219:21: identifier i
lots_of_real_code.c:219:22: punctuator ==
lots_of_real_code.c:219:24: constant 0
lots_of_real_code.c:219:25: punctuator )
lots_of_real_code.c:220:6: identifier gcd
lots_of_real_code.c:220:10: punctuator =
lots_of_real_code.c:220:12: identifier i
lots_of_real_code.c:220:13: punctuator ;
lots_of_real_code.c:221:2: punctuator }
lots_of_real_code.c:223:2: identifier printf
lots_of_real_code.c:223:8: punctuator (
lots_of_real_code.c:223:9: string-literal "G.C.D of %d and %d is %d"
lots_of_real_code.c:223:35: punctuator ,
lots_of_real_code.c:223:37: identifier n1
lots_of_real_code.c:223:39: punctuator ,
lots_of_real_code.c:223:41: identifier n2
lots_of_real_code.c:223:43: punctuator ,
lots_of_real_code.c:223:45: identifier gcd
lots_of_real_code.c:223:48: punctuator )
lots_of_real_code.c:223:49: punctuator ;
lots_of_real_code.c:225:2: keyword return
lots_of_real_code.c:225:9: constant 0
lots_of_real_code.c:225:10: punctuator ;
lots_of_real_code.c:226:0: punctuator }
lots_of_real_code.c:228:0: keyword int
lots_of_real_code.c:228:4: identifier main
lots_of_real_code.c:228:8: punctuator (
lots_of_real_code.c:228:9: punctuator )
lots_of_real_code.c:229:0: punctuator {
lots_of_real_code.c:230:2: keyword int
lots_of_real_code.c:230:6: identifier n1
lots_of_real_code.c:230:8: punctuator ,
lots_of_real_code.c:230:10: identifier n2
lots_of_real_code.c:230:12: punctuator ;
lots_of_real_code.c:232:2: identifier printf
lots_of_real_code.c:232:8: punctuator (
lots_of_real_code.c:232:9: string-literal "Enter two positive integers: "
lots_of_real_code.c:232:40: punctuator )
lots_of_real_code.c:232:41: punctuator ;
lots_of_real_code.c:233:2: identifier scanf
lots_of_real_code.c:233:7: punctuator (
lots_of_real_code.c:233:8: string-literal "%d %d"
lots_of_real_code.c:233:15: punctuator ,
lots_of_real_code.c:233:16: punctuator &
lots_of_real_code.c:233:17: identifier n1
lots_of_real_code.c:233:19: punctuator ,
lots_of_real_code.c:233:20: punctuator &
lots_of_real_code.c:233:21: identifier n2
lots_of_real_code.c:233:23: punctuator )
lots_of_real_code.c:233:24: punctuator ;
lots_of_real_code.c:235:2: keyword while
lots_of_real_code.c:235:7: punctuator (
lots_of_real_code.c:235:8: identifier n1
lots_of_real_code.c:235:10: punctuator !=
lots_of_real_code.c:235:12: identifier n2
lots_of_real_code.c:235:14: punctuator )
lots_of_real_code.c:236:2: punctuator {
lots_of_real_code.c:237:4: keyword if
lots_of_real_code.c:237:6: punctuator (
lots_of_real_code.c:237:7: identifier n1
lots_of_real_code.c:237:10: punctuator >
lots_of_real_code.c:237:12: identifier n2
lots_of_real_code.c:237:14: punctuator )
lots_of_real_code.c:238:6: identifier n1
lots_of_real_code.c:238:9: punctuator -=
lots_of_real_code.c:238:12: identifier n2
lots_of_real_code.c:238:14: punctuator ;
lots_of_real_code.c:239:4: keyword else
lots_of_real_code.c:240:6: identifier n2
lots_of_real_code.c:240:9: punctuator -=
lots_of_real_code.c:240:12: identifier n1
lots_of_real_code.c:240:14: punctuator ;
lots_of_real_code.c:241:2: punctuator }
lots_of_real_code.c:242:2: identifier printf
lots_of_real_code.c:242:8: punctuator (
lots_of_real_code.c:242:9: string-literal "GCD = %d"
lots_of_real_code.c:242:19: punctuator ,
lots_of_real_code.c:242:20: identifier n1
lots_of_real_code.c:242:22: punctuator )
lots_of_real_code.c:242:23: punctuator ;
lots_of_real_code.c:244:2: keyword return
lots_of_real_code.c:244:9: constant 0
lots_of_real_code.c:244:10: punctuator ;
lots_of_real_code.c:245:0: punctuator }
lots_of_real_code.c:247:0: keyword int
lots_of_real_code.c:247:4: identifier main
lots_of_real_code.c:247:8: punctuator (
lots_of_real_code.c:247:9: punctuator )
lots_of_real_code.c:248:0: punctuator {
lots_of_real_code.c:249:2: keyword int
lots_of_real_code.c:249:6: identifier n1
lots_of_real_code.c:249:8: punctuator ,
lots_of_real_code.c:249:10: identifier n2
lots_of_real_code.c:249:12: punctuator ;
lots_of_real_code.c:251:2: identifier printf
lots_of_real_code.c:251:8: punctuator (
lots_of_real_code.c:251:9: string-literal "Enter two integers: "
lots_of_real_code.c:251:31: punctuator )
lots_of_real_code.c:251:32: punctuator ;
lots_of_real_code.c:252:2: identifier scanf
lots_of_real_code.c:252:7: punctuator (
lots_of_real_code.c:252:8: string-literal "%d %d"
lots_of_real_code.c:252:15: punctuator ,
lots_of_real_code.c:252:16: punctuator &
lots_of_real_code.c:252:17: identifier n1
lots_of_real_code.c:252:19: punctuator ,
lots_of_real_code.c:252:20: punctuator &
lots_of_real_code.c:252:21: identifier n2
lots_of_real_code.c:252:23: punctuator )
lots_of_real_code.c:252:24: punctuator ;
lots_of_real_code.c:255:2: identifier n1
lots_of_real_code.c:255:5: punctuator =
lots_of_real_code.c:255:7: punctuator (
lots_of_real_code.c:255:9: identifier n1
lots_of_real_code.c:255:12: punctuator >
lots_of_real_code.c:255:14: constant 0
lots_of_real_code.c:255:15: punctuator )
lots_of_real_code.c:255:17: punctuator ?
lots_of_real_code.c:255:19: identifier n1
lots_of_real_code.c:255:22: punctuator :
lots_of_real_code.c:255:24: punctuator -
lots_of_real_code.c:255:25: identifier n1
lots_of_real_code.c:255:27: punctuator ;
lots_of_real_code.c:256:2: identifier n2
lots_of_real_code.c:256:5: punctuator =
lots_of_real_code.c:256:7: punctuator (
lots_of_real_code.c:256:9: identifier n2
lots_of_real_code.c:256:12: punctuator >
lots_of_real_code.c:256:14: constant 0
lots_of_real_code.c:256:15: punctuator )
lots_of_real_code.c:256:17: punctuator ?
lots_of_real_code.c:256:19: identifier n2
lots_of_real_code.c:256:22: punctuator :
lots_of_real_code.c:256:24: punctuator -
lots_of_real_code.c:256:25: identifier n2
lots_of_real_code.c:256:27: punctuator ;
lots_of_real_code.c:258:2: keyword while
lots_of_real_code.c:258:7: punctuator (
lots_of_real_code.c:258:8: identifier n1
lots_of_real_code.c:258:10: punctuator !=
lots_of_real_code.c:258:12: identifier n2
lots_of_real_code.c:258:14: punctuator )
lots_of_real_code.c:259:2: punctuator {
lots_of_real_code.c:260:4: keyword if
lots_of_real_code.c:260:6: punctuator (
lots_of_real_code.c:260:7: identifier n1
lots_of_real_code.c:260:10: punctuator >
lots_of_real_code.c:260:12: identifier n2
lots_of_real_code.c:260:14: punctuator )
lots_of_real_code.c:261:6: identifier n1
lots_of_real_code.c:261:9: punctuator -=
lots_of_real_code.c:261:12: identifier n2
lots_of_real_code.c:261:14: punctuator ;
lots_of_real_code.c:262:4: keyword else
lots_of_real_code.c:263:6: identifier n2
lots_of_real_code.c:263:9: punctuator -=
lots_of_real_code.c:263:12: identifier n1
lots_of_real_code.c:263:14: punctuator ;
lots_of_real_code.c:264:2: punctuator }
lots_of_real_code.c:265:2: identifier printf
lots_of_real_code.c:265:8: punctuator (
lots_of_real_code.c:265:9: string-literal "GCD = %d"
lots_of_real_code.c:265:19: punctuator ,
lots_of_real_code.c:265:20: identifier n1
lots_of_real_code.c:265:22: punctuator )
lots_of_real_code.c:265:23: punctuator ;
lots_of_real_code.c:267:2: keyword return
lots_of_real_code.c:267:9: constant 0
lots_of_real_code.c:267:10: punctuator ;
lots_of_real_code.c:268:0: punctuator }
lots_of_real_code.c:270:0: keyword enum
lots_of_real_code.c:270:5: punctuator {
lots_of_real_code.c:287:6: identifier POOL_MANAGER_ACTIVE
lots_of_real_code.c:287:26: punctuator =
lots_of_real_code.c:287:28: constant 1
lots_of_real_code.c:287:30: punctuator <<
lots_of_real_code.c:287:33: constant 0
lots_of_real_code.c:287:34: punctuator ,
lots_of_real_code.c:288:2: identifier POOL_DISASSOCIATED
lots_of_real_code.c:288:21: punctuator =
lots_of_real_code.c:288:23: constant 1
lots_of_real_code.c:288:25: punctuator <<
lots_of_real_code.c:288:28: constant 2
lots_of_real_code.c:288:29: punctuator ,
lots_of_real_code.c:291:6: identifier WORKER_DIE
lots_of_real_code.c:291:18: punctuator =
lots_of_real_code.c:291:20: constant 1
lots_of_real_code.c:291:22: punctuator <<
lots_of_real_code.c:291:25: constant 1
lots_of_real_code.c:291:26: punctuator ,
lots_of_real_code.c:292:2: identifier WORKER_IDLE
lots_of_real_code.c:292:15: punctuator =
lots_of_real_code.c:292:17: constant 1
lots_of_real_code.c:292:19: punctuator <<
lots_of_real_code.c:292:22: constant 2
lots_of_real_code.c:292:23: punctuator ,
lots_of_real_code.c:293:2: identifier WORKER_PREP
lots_of_real_code.c:293:15: punctuator =
lots_of_real_code.c:293:17: constant 1
lots_of_real_code.c:293:19: punctuator <<
lots_of_real_code.c:293:22: constant 3
lots_of_real_code.c:293:23: punctuator ,
lots_of_real_code.c:294:2: identifier WORKER_CPU_INTENSIVE
lots_of_real_code.c:294:23: punctuator =
lots_of_real_code.c:294:25: constant 1
lots_of_real_code.c:294:27: punctuator <<
lots_of_real_code.c:294:30: constant 6
lots_of_real_code.c:294:31: punctuator ,
lots_of_real_code.c:295:2: identifier WORKER_UNBOUND
lots_of_real_code.c:295:18: punctuator =
lots_of_real_code.c:295:20: constant 1
lots_of_real_code.c:295:22: punctuator <<
lots_of_real_code.c:295:25: constant 7
lots_of_real_code.c:295:26: punctuator ,
lots_of_real_code.c:296:2: identifier WORKER_REBOUND
lots_of_real_code.c:296:18: punctuator =
lots_of_real_code.c:296:20: constant 1
lots_of_real_code.c:296:22: punctuator <<
lots_of_real_code.c:296:25: constant 8
lots_of_real_code.c:296:26: punctuator ,
lots_of_real_code.c:298:2: identifier WORKER_NOT_RUNNING
lots_of_real_code.c:298:21: punctuator =
lots_of_real_code.c:298:23: identifier WORKER_PREP
lots_of_real_code.c:298:35: punctuator |
lots_of_real_code.c:298:37: identifier WORKER_CPU_INTENSIVE
lots_of_real_code.c:298:58: punctuator |
lots_of_real_code.c:299:6: identifier WORKER_UNBOUND
lots_of_real_code.c:299:21: punctuator |
lots_of_real_code.c:299:23: identifier WORKER_REBOUND
lots_of_real_code.c:299:37: punctuator ,
lots_of_real_code.c:301:2: identifier NR_STD_WORKER_POOLS
lots_of_real_code.c:301:22: punctuator =
lots_of_real_code.c:301:24: constant 2
lots_of_real_code.c:301:25: punctuator ,
lots_of_real_code.c:303:2: identifier UNBOUND_POOL_HASH_ORDER
lots_of_real_code.c:303:26: punctuator =
lots_of_real_code.c:303:28: constant 6
lots_of_real_code.c:303:29: punctuator ,
lots_of_real_code.c:304:2: identifier BUSY_WORKER_HASH_ORDER
lots_of_real_code.c:304:25: punctuator =
lots_of_real_code.c:304:27: constant 6
lots_of_real_code.c:304:28: punctuator ,
lots_of_real_code.c:306:2: identifier MAX_IDLE_WORKERS_RATIO
lots_of_real_code.c:306:25: punctuator =
lots_of_real_code.c:306:27: constant 4
lots_of_real_code.c:306:28: punctuator ,
lots_of_real_code.c:307:2: identifier IDLE_WORKER_TIMEOUT
lots_of_real_code.c:307:22: punctuator =
lots_of_real_code.c:307:24: constant 300
lots_of_real_code.c:307:28: punctuator *
lots_of_real_code.c:307:30: identifier HZ
lots_of_real_code.c:307:32: punctuator ,
lots_of_real_code.c:309:2: identifier MAYDAY_INITIAL_TIMEOUT
lots_of_real_code.c:309:26: punctuator =
lots_of_real_code.c:309:28: identifier HZ
lots_of_real_code.c:309:31: punctuator /
lots_of_real_code.c:309:33: constant 100
lots_of_real_code.c:309:37: punctuator >=
lots_of_real_code.c:309:40: constant 2
lots_of_real_code.c:309:42: punctuator ?
lots_of_real_code.c:309:44: identifier HZ
lots_of_real_code.c:309:47: punctuator /
lots_of_real_code.c:309:49: constant 100
lots_of_real_code.c:309:53: punctuator :
lots_of_real_code.c:309:55: constant 2
lots_of_real_code.c:309:56: punctuator ,
lots_of_real_code.c:312:6: identifier MAYDAY_INTERVAL
lots_of_real_code.c:312:23: punctuator =
lots_of_real_code.c:312:25: identifier HZ
lots_of_real_code.c:312:28: punctuator /
lots_of_real_code.c:312:30: constant 10
lots_of_real_code.c:312:32: punctuator ,
lots_of_real_code.c:313:2: identifier CREATE_COOLDOWN
lots_of_real_code.c:313:19: punctuator =
lots_of_real_code.c:313:21: identifier HZ
lots_of_real_code.c:313:23: punctuator ,
lots_of_real_code.c:319:6: identifier RESCUER_NICE_LEVEL
lots_of_real_code.c:319:25: punctuator =
lots_of_real_code.c:319:27: identifier MIN_NICE
lots_of_real_code.c:319:35: punctuator ,
lots_of_real_code.c:320:2: identifier HIGHPRI_NICE_LEVEL
lots_of_real_code.c:320:21: punctuator =
lots_of_real_code.c:320:23: identifier MIN_NICE
lots_of_real_code.c:320:31: punctuator ,
lots_of_real_code.c:322:2: identifier WQ_NAME_LEN
lots_of_real_code.c:322:15: punctuator =
lots_of_real_code.c:322:17: constant 24
lots_of_real_code.c:322:19: punctuator ,
lots_of_real_code.c:323:0: punctuator }
lots_of_real_code.c:323:1: punctuator ;
lots_of_real_code.c:361:0: keyword struct
lots_of_real_code.c:361:7: identifier worker_pool
lots_of_real_code.c:361:19: punctuator {
lots_of_real_code.c:362:2: identifier spinlock_t
lots_of_real_code.c:362:14: identifier lock
lots_of_real_code.c:362:18: punctuator ;
lots_of_real_code.c:363:2: keyword int
lots_of_real_code.c:363:8: identifier cpu
lots_of_real_code.c:363:11: punctuator ;
lots_of_real_code.c:364:2: keyword int
lots_of_real_code.c:364:8: identifier node
lots_of_real_code.c:364:12: punctuator ;
lots_of_real_code.c:365:2: keyword int
lots_of_real_code.c:365:8: identifier id
lots_of_real_code.c:365:10: punctuator ;
lots_of_real_code.c:366:2: keyword unsigned
lots_of_real_code.c:366:11: keyword int
lots_of_real_code.c:366:16: identifier flags
lots_of_real_code.c:366:21: punctuator ;
lots_of_real_code.c:368:2: keyword unsigned
lots_of_real_code.c:368:11: keyword long
lots_of_real_code.c:368:17: identifier watchdog_ts
lots_of_real_code.c:368:28: punctuator ;
lots_of_real_code.c:370:2: keyword struct
lots_of_real_code.c:370:9: identifier list_head
lots_of_real_code.c:370:19: identifier worklist
lots_of_real_code.c:370:27: punctuator ;
lots_of_real_code.c:372:2: keyword int
lots_of_real_code.c:372:8: identifier nr_workers
lots_of_real_code.c:372:18: punctuator ;
lots_of_real_code.c:373:2: keyword int
lots_of_real_code.c:373:8: identifier nr_idle
lots_of_real_code.c:373:15: punctuator ;
lots_of_real_code.c:375:2: keyword struct
lots_of_real_code.c:375:9: identifier list_head
lots_of_real_code.c:375:19: identifier idle_list
lots_of_real_code.c:375:28: punctuator ;
lots_of_real_code.c:376:2: keyword struct
lots_of_real_code.c:376:9: identifier timer_list
lots_of_real_code.c:376:20: identifier idle_timer
lots_of_real_code.c:376:30: punctuator ;
lots_of_real_code.c:377:2: keyword struct
lots_of_real_code.c:377:9: identifier timer_list
lots_of_real_code.c:377:20: identifier mayday_timer
lots_of_real_code.c:377:32: punctuator ;
lots_of_real_code.c:380:2: identifier DECLARE_HASHTABLE
lots_of_real_code.c:380:19: punctuator (
lots_of_real_code.c:380:20: identifier busy_hash
lots_of_real_code.c:380:29: punctuator ,
lots_of_real_code.c:380:31: identifier BUSY_WORKER_HASH_ORDER
lots_of_real_code.c:380:53: punctuator )
lots_of_real_code.c:380:54: punctuator ;
lots_of_real_code.c:383:2: keyword struct
lots_of_real_code.c:383:9: identifier worker
lots_of_real_code.c:383:17: punctuator *
lots_of_real_code.c:383:18: identifier manager
lots_of_real_code.c:383:25: punctuator ;
lots_of_real_code.c:384:2: keyword struct
lots_of_real_code.c:384:9: identifier list_head
lots_of_real_code.c:384:19: identifier workers
lots_of_real_code.c:384:26: punctuator ;
lots_of_real_code.c:385:2: keyword struct
lots_of_real_code.c:385:9: identifier completion
lots_of_real_code.c:385:20: punctuator *
lots_of_real_code.c:385:21: identifier detach_completion
lots_of_real_code.c:385:38: punctuator ;
lots_of_real_code.c:387:2: keyword struct
lots_of_real_code.c:387:9: identifier ida
lots_of_real_code.c:387:14: identifier worker_ida
lots_of_real_code.c:387:24: punctuator ;
lots_of_real_code.c:389:2: keyword struct
lots_of_real_code.c:389:9: identifier workqueue_attrs
lots_of_real_code.c:389:25: punctuator *
lots_of_real_code.c:389:26: identifier attrs
lots_of_real_code.c:389:31: punctuator ;
lots_of_real_code.c:390:2: keyword struct
lots_of_real_code.c:390:9: identifier hlist_node
lots_of_real_code.c:390:20: identifier hash_node
lots_of_real_code.c:390:29: punctuator ;
lots_of_real_code.c:391:2: keyword int
lots_of_real_code.c:391:8: identifier refcnt
lots_of_real_code.c:391:14: punctuator ;
lots_of_real_code.c:398:2: identifier atomic_t
lots_of_real_code.c:398:12: identifier nr_running
lots_of_real_code.c:398:23: identifier ____cacheline_aligned_in_smp
lots_of_real_code.c:398:51: punctuator ;
lots_of_real_code.c:404:2: keyword struct
lots_of_real_code.c:404:9: identifier rcu_head
lots_of_real_code.c:404:19: identifier rcu
lots_of_real_code.c:404:22: punctuator ;
lots_of_real_code.c:405:0: punctuator }
lots_of_real_code.c:405:2: identifier ____cacheline_aligned_in_smp
lots_of_real_code.c:405:30: punctuator ;
lots_of_real_code.c:413:0: keyword struct
lots_of_real_code.c:413:7: identifier pool_workqueue
lots_of_real_code.c:413:22: punctuator {
lots_of_real_code.c:414:2: keyword struct
lots_of_real_code.c:414:9: identifier worker_pool
lots_of_real_code.c:414:21: punctuator *
lots_of_real_code.c:414:22: identifier pool
lots_of_real_code.c:414:26: punctuator ;
lots_of_real_code.c:415:2: keyword struct
lots_of_real_code.c:415:9: identifier workqueue_struct
lots_of_real_code.c:415:26: punctuator *
lots_of_real_code.c:415:27: identifier wq
lots_of_real_code.c:415:29: punctuator ;
lots_of_real_code.c:416:2: keyword int
lots_of_real_code.c:416:8: identifier work_color
lots_of_real_code.c:416:18: punctuator ;
lots_of_real_code.c:417:2: keyword int
lots_of_real_code.c:417:8: identifier flush_color
lots_of_real_code.c:417:19: punctuator ;
lots_of_real_code.c:418:2: keyword int
lots_of_real_code.c:418:8: identifier refcnt
lots_of_real_code.c:418:14: punctuator ;
lots_of_real_code.c:419:2: keyword int
lots_of_real_code.c:419:8: identifier nr_in_flight
lots_of_real_code.c:419:20: punctuator [
lots_of_real_code.c:419:21: identifier WORK_NR_COLORS
lots_of_real_code.c:419:35: punctuator ]
lots_of_real_code.c:419:36: punctuator ;
lots_of_real_code.c:421:2: keyword int
lots_of_real_code.c:421:8: identifier nr_active
lots_of_real_code.c:421:17: punctuator ;
lots_of_real_code.c:422:2: keyword int
lots_of_real_code.c:422:8: identifier max_active
lots_of_real_code.c:422:18: punctuator ;
lots_of_real_code.c:423:2: keyword struct
lots_of_real_code.c:423:9: identifier list_head
lots_of_real_code.c:423:19: identifier delayed_works
lots_of_real_code.c:423:32: punctuator ;
lots_of_real_code.c:424:2: keyword struct
lots_of_real_code.c:424:9: identifier list_head
lots_of_real_code.c:424:19: identifier pwqs_node
lots_of_real_code.c:424:28: punctuator ;
lots_of_real_code.c:425:2: keyword struct
lots_of_real_code.c:425:9: identifier list_head
lots_of_real_code.c:425:19: identifier mayday_node
lots_of_real_code.c:425:30: punctuator ;
lots_of_real_code.c:433:2: keyword struct
lots_of_real_code.c:433:9: identifier work_struct
lots_of_real_code.c:433:21: identifier unbound_release_work
lots_of_real_code.c:433:41: punctuator ;
lots_of_real_code.c:434:2: keyword struct
lots_of_real_code.c:434:9: identifier rcu_head
lots_of_real_code.c:434:19: identifier rcu
lots_of_real_code.c:434:22: punctuator ;
lots_of_real_code.c:435:0: punctuator }
lots_of_real_code.c:435:2: identifier __aligned
lots_of_real_code.c:435:11: punctuator (
lots_of_real_code.c:435:12: constant 1
lots_of_real_code.c:435:14: punctuator <<
lots_of_real_code.c:435:17: identifier WORK_STRUCT_FLAG_BITS
lots_of_real_code.c:435:38: punctuator )
lots_of_real_code.c:435:39: punctuator ;
lots_of_real_code.c:440:0: keyword struct
lots_of_real_code.c:440:7: identifier wq_flusher
lots_of_real_code.c:440:18: punctuator {
lots_of_real_code.c:441:2: keyword struct
lots_of_real_code.c:441:9: identifier list_head
lots_of_real_code.c:441:19: identifier list
lots_of_real_code.c:441:23: punctuator ;
lots_of_real_code.c:442:2: keyword int
lots_of_real_code.c:442:8: identifier flush_color
lots_of_real_code.c:442:19: punctuator ;
lots_of_real_code.c:443:2: keyword struct
lots_of_real_code.c:443:9: identifier completion
lots_of_real_code.c:443:20: identifier done
lots_of_real_code.c:443:24: punctuator ;
lots_of_real_code.c:444:0: punctuator }
lots_of_real_code.c:444:1: punctuator ;
lots_of_real_code.c:446:0: keyword struct
lots_of_real_code.c:446:7: identifier wq_device
lots_of_real_code.c:446:16: punctuator ;
