lots_of_real_code.c:1:1: keyword struct
lots_of_real_code.c:1:8: identifier course
lots_of_real_code.c:2:1: punctuator {
lots_of_real_code.c:3:3: keyword int
lots_of_real_code.c:3:7: identifier marks
lots_of_real_code.c:3:12: punctuator ;
lots_of_real_code.c:4:3: keyword char
lots_of_real_code.c:4:8: identifier subject
lots_of_real_code.c:4:15: punctuator [
lots_of_real_code.c:4:16: constant 30
lots_of_real_code.c:4:18: punctuator ]
lots_of_real_code.c:4:19: punctuator ;
lots_of_real_code.c:5:1: punctuator }
lots_of_real_code.c:5:2: punctuator ;
lots_of_real_code.c:7:1: keyword int
lots_of_real_code.c:7:5: identifier main
lots_of_real_code.c:7:9: punctuator (
lots_of_real_code.c:7:10: punctuator )
lots_of_real_code.c:8:1: punctuator {
lots_of_real_code.c:9:3: keyword struct
lots_of_real_code.c:9:10: identifier course
lots_of_real_code.c:9:17: punctuator *
lots_of_real_code.c:9:18: identifier ptr
lots_of_real_code.c:9:21: punctuator ;
lots_of_real_code.c:10:3: keyword int
lots_of_real_code.c:10:7: identifier i
lots_of_real_code.c:10:8: punctuator ,
lots_of_real_code.c:10:10: identifier noOfRecords
lots_of_real_code.c:10:21: punctuator ;
lots_of_real_code.c:11:3: identifier printf
lots_of_real_code.c:11:9: punctuator (
lots_of_real_code.c:11:10: string-literal "Enter number of records: "
lots_of_real_code.c:11:37: punctuator )
lots_of_real_code.c:11:38: punctuator ;
lots_of_real_code.c:12:3: identifier scanf
lots_of_real_code.c:12:8: punctuator (
lots_of_real_code.c:12:9: string-literal "%d"
lots_of_real_code.c:12:13: punctuator ,
lots_of_real_code.c:12:15: punctuator &
lots_of_real_code.c:12:16: identifier noOfRecords
lots_of_real_code.c:12:27: punctuator )
lots_of_real_code.c:12:28: punctuator ;
lots_of_real_code.c:15:3: identifier ptr
lots_of_real_code.c:15:7: punctuator =
lots_of_real_code.c:15:9: punctuator (
lots_of_real_code.c:15:10: keyword struct
lots_of_real_code.c:15:17: identifier course
lots_of_real_code.c:15:23: punctuator *
lots_of_real_code.c:15:24: punctuator )
lots_of_real_code.c:15:26: identifier malloc
lots_of_real_code.c:15:33: punctuator (
lots_of_real_code.c:15:34: identifier noOfRecords
lots_of_real_code.c:15:46: punctuator *
lots_of_real_code.c:15:48: keyword sizeof
lots_of_real_code.c:15:54: punctuator (
lots_of_real_code.c:15:55: keyword struct
lots_of_real_code.c:15:62: identifier course
lots_of_real_code.c:15:68: punctuator )
lots_of_real_code.c:15:69: punctuator )
lots_of_real_code.c:15:70: punctuator ;
lots_of_real_code.c:17:3: keyword for
lots_of_real_code.c:17:6: punctuator (
lots_of_real_code.c:17:7: identifier i
lots_of_real_code.c:17:9: punctuator =
lots_of_real_code.c:17:11: constant 0
lots_of_real_code.c:17:12: punctuator ;
lots_of_real_code.c:17:14: identifier i
lots_of_real_code.c:17:16: punctuator <
lots_of_real_code.c:17:18: identifier noOfRecords
lots_of_real_code.c:17:29: punctuator ;
lots_of_real_code.c:17:31: punctuator ++
lots_of_real_code.c:17:33: identifier i
lots_of_real_code.c:17:34: punctuator )
lots_of_real_code.c:18:3: punctuator {
lots_of_real_code.c:19:5: identifier printf
lots_of_real_code.c:19:11: punctuator (
lots_of_real_code.c:19:12: string-literal "Enter name of the subject and marks respectively:\n"
lots_of_real_code.c:19:65: punctuator )
lots_of_real_code.c:19:66: punctuator ;
lots_of_real_code.c:20:5: identifier scanf
lots_of_real_code.c:20:10: punctuator (
lots_of_real_code.c:20:11: string-literal "%s %d"
lots_of_real_code.c:20:18: punctuator ,
lots_of_real_code.c:20:20: punctuator &
lots_of_real_code.c:20:21: punctuator (
lots_of_real_code.c:20:22: identifier ptr
lots_of_real_code.c:20:25: punctuator +
lots_of_real_code.c:20:26: identifier i
lots_of_real_code.c:20:27: punctuator )
lots_of_real_code.c:20:28: punctuator ->
lots_of_real_code.c:20:30: identifier subject
lots_of_real_code.c:20:37: punctuator ,
lots_of_real_code.c:20:39: punctuator &
lots_of_real_code.c:20:40: punctuator (
lots_of_real_code.c:20:41: identifier ptr
lots_of_real_code.c:20:44: punctuator +
lots_of_real_code.c:20:45: identifier i
lots_of_real_code.c:20:46: punctuator )
lots_of_real_code.c:20:47: punctuator ->
lots_of_real_code.c:20:49: identifier marks
lots_of_real_code.c:20:54: punctuator )
lots_of_real_code.c:20:55: punctuator ;
lots_of_real_code.c:21:3: punctuator }
lots_of_real_code.c:23:3: identifier printf
lots_of_real_code.c:23:9: punctuator (
lots_of_real_code.c:23:10: string-literal "Displaying Information:\n"
lots_of_real_code.c:23:37: punctuator )
lots_of_real_code.c:23:38: punctuator ;
lots_of_real_code.c:25:3: keyword for
lots_of_real_code.c:25:6: punctuator (
lots_of_real_code.c:25:7: identifier i
lots_of_real_code.c:25:9: punctuator =
lots_of_real_code.c:25:11: constant 0
lots_of_real_code.c:25:12: punctuator ;
lots_of_real_code.c:25:14: identifier i
lots_of_real_code.c:25:16: punctuator <
lots_of_real_code.c:25:18: identifier noOfRecords
lots_of_real_code.c:25:30: punctuator ;
lots_of_real_code.c:25:32: punctuator ++
lots_of_real_code.c:25:34: identifier i
lots_of_real_code.c:25:35: punctuator )
lots_of_real_code.c:26:5: identifier printf
lots_of_real_code.c:26:11: punctuator (
lots_of_real_code.c:26:12: string-literal "%s\t%d\n"
lots_of_real_code.c:26:22: punctuator ,
lots_of_real_code.c:26:24: punctuator (
lots_of_real_code.c:26:25: identifier ptr
lots_of_real_code.c:26:28: punctuator +
lots_of_real_code.c:26:29: identifier i
lots_of_real_code.c:26:30: punctuator )
lots_of_real_code.c:26:31: punctuator ->
lots_of_real_code.c:26:33: identifier subject
lots_of_real_code.c:26:40: punctuator ,
lots_of_real_code.c:26:42: punctuator (
lots_of_real_code.c:26:43: identifier ptr
lots_of_real_code.c:26:46: punctuator +
lots_of_real_code.c:26:47: identifier i
lots_of_real_code.c:26:48: punctuator )
lots_of_real_code.c:26:49: punctuator ->
lots_of_real_code.c:26:51: identifier marks
lots_of_real_code.c:26:56: punctuator )
lots_of_real_code.c:26:57: punctuator ;
lots_of_real_code.c:28:3: keyword return
lots_of_real_code.c:28:10: constant 0
lots_of_real_code.c:28:11: punctuator ;
lots_of_real_code.c:29:1: punctuator }
lots_of_real_code.c:31:1: keyword int
lots_of_real_code.c:31:5: identifier main
lots_of_real_code.c:31:9: punctuator (
lots_of_real_code.c:31:10: punctuator )
lots_of_real_code.c:32:1: punctuator {
lots_of_real_code.c:33:3: keyword int
lots_of_real_code.c:33:7: identifier i
lots_of_real_code.c:33:8: punctuator ,
lots_of_real_code.c:33:10: identifier j
lots_of_real_code.c:33:11: punctuator ,
lots_of_real_code.c:33:13: identifier rows
lots_of_real_code.c:33:17: punctuator ;
lots_of_real_code.c:35:3: identifier printf
lots_of_real_code.c:35:9: punctuator (
lots_of_real_code.c:35:10: string-literal "Enter number of rows: "
lots_of_real_code.c:35:34: punctuator )
lots_of_real_code.c:35:35: punctuator ;
lots_of_real_code.c:36:3: identifier scanf
lots_of_real_code.c:36:8: punctuator (
lots_of_real_code.c:36:9: string-literal "%d"
lots_of_real_code.c:36:13: punctuator ,
lots_of_real_code.c:36:14: punctuator &
lots_of_real_code.c:36:15: identifier rows
lots_of_real_code.c:36:19: punctuator )
lots_of_real_code.c:36:20: punctuator ;
lots_of_real_code.c:38:3: keyword for
lots_of_real_code.c:38:6: punctuator (
lots_of_real_code.c:38:7: identifier i
lots_of_real_code.c:38:8: punctuator =
lots_of_real_code.c:38:9: constant 1
lots_of_real_code.c:38:10: punctuator ;
lots_of_real_code.c:38:12: identifier i
lots_of_real_code.c:38:13: punctuator <=
lots_of_real_code.c:38:15: identifier rows
lots_of_real_code.c:38:19: punctuator ;
lots_of_real_code.c:38:21: punctuator ++
lots_of_real_code.c:38:23: identifier i
lots_of_real_code.c:38:24: punctuator )
lots_of_real_code.c:39:3: punctuator {
lots_of_real_code.c:40:5: keyword for
lots_of_real_code.c:40:8: punctuator (
lots_of_real_code.c:40:9: identifier j
lots_of_real_code.c:40:10: punctuator =
lots_of_real_code.c:40:11: constant 1
lots_of_real_code.c:40:12: punctuator ;
lots_of_real_code.c:40:14: identifier j
lots_of_real_code.c:40:15: punctuator <=
lots_of_real_code.c:40:17: identifier i
lots_of_real_code.c:40:18: punctuator ;
lots_of_real_code.c:40:20: punctuator ++
lots_of_real_code.c:40:22: identifier j
lots_of_real_code.c:40:23: punctuator )
lots_of_real_code.c:41:5: punctuator {
lots_of_real_code.c:42:7: identifier printf
lots_of_real_code.c:42:13: punctuator (
lots_of_real_code.c:42:14: string-literal "* "
lots_of_real_code.c:42:18: punctuator )
lots_of_real_code.c:42:19: punctuator ;
lots_of_real_code.c:43:5: punctuator }
lots_of_real_code.c:44:5: identifier printf
lots_of_real_code.c:44:11: punctuator (
lots_of_real_code.c:44:12: string-literal "\n"
lots_of_real_code.c:44:16: punctuator )
lots_of_real_code.c:44:17: punctuator ;
lots_of_real_code.c:45:3: punctuator }
lots_of_real_code.c:46:3: keyword return
lots_of_real_code.c:46:10: constant 0
lots_of_real_code.c:46:11: punctuator ;
lots_of_real_code.c:47:1: punctuator }
lots_of_real_code.c:49:1: keyword int
lots_of_real_code.c:49:5: identifier main
lots_of_real_code.c:49:9: punctuator (
lots_of_real_code.c:49:10: punctuator )
lots_of_real_code.c:50:1: punctuator {
lots_of_real_code.c:51:3: keyword int
lots_of_real_code.c:51:7: identifier i
lots_of_real_code.c:51:8: punctuator ,
lots_of_real_code.c:51:10: identifier j
lots_of_real_code.c:51:11: punctuator ,
lots_of_real_code.c:51:13: identifier rows
lots_of_real_code.c:51:17: punctuator ;
lots_of_real_code.c:53:3: identifier printf
lots_of_real_code.c:53:9: punctuator (
lots_of_real_code.c:53:10: string-literal "Enter number of rows: "
lots_of_real_code.c:53:34: punctuator )
lots_of_real_code.c:53:35: punctuator ;
lots_of_real_code.c:54:3: identifier scanf
lots_of_real_code.c:54:8: punctuator (
lots_of_real_code.c:54:9: string-literal "%d"
lots_of_real_code.c:54:13: punctuator ,
lots_of_real_code.c:54:14: punctuator &
lots_of_real_code.c:54:15: identifier rows
lots_of_real_code.c:54:19: punctuator )
lots_of_real_code.c:54:20: punctuator ;
lots_of_real_code.c:56:3: keyword for
lots_of_real_code.c:56:6: punctuator (
lots_of_real_code.c:56:7: identifier i
lots_of_real_code.c:56:8: punctuator =
lots_of_real_code.c:56:9: constant 1
lots_of_real_code.c:56:10: punctuator ;
lots_of_real_code.c:56:12: identifier i
lots_of_real_code.c:56:13: punctuator <=
lots_of_real_code.c:56:15: identifier rows
lots_of_real_code.c:56:19: punctuator ;
lots_of_real_code.c:56:21: punctuator ++
lots_of_real_code.c:56:23: identifier i
lots_of_real_code.c:56:24: punctuator )
lots_of_real_code.c:57:3: punctuator {
lots_of_real_code.c:58:5: keyword for
lots_of_real_code.c:58:8: punctuator (
lots_of_real_code.c:58:9: identifier j
lots_of_real_code.c:58:10: punctuator =
lots_of_real_code.c:58:11: constant 1
lots_of_real_code.c:58:12: punctuator ;
lots_of_real_code.c:58:14: identifier j
lots_of_real_code.c:58:15: punctuator <=
lots_of_real_code.c:58:17: identifier i
lots_of_real_code.c:58:18: punctuator ;
lots_of_real_code.c:58:20: punctuator ++
lots_of_real_code.c:58:22: identifier j
lots_of_real_code.c:58:23: punctuator )
lots_of_real_code.c:59:5: punctuator {
lots_of_real_code.c:60:7: identifier printf
lots_of_real_code.c:60:13: punctuator (
lots_of_real_code.c:60:14: string-literal "%d "
lots_of_real_code.c:60:19: punctuator ,
lots_of_real_code.c:60:20: identifier j
lots_of_real_code.c:60:21: punctuator )
lots_of_real_code.c:60:22: punctuator ;
lots_of_real_code.c:61:5: punctuator }
lots_of_real_code.c:62:5: identifier printf
lots_of_real_code.c:62:11: punctuator (
lots_of_real_code.c:62:12: string-literal "\n"
lots_of_real_code.c:62:16: punctuator )
lots_of_real_code.c:62:17: punctuator ;
lots_of_real_code.c:63:3: punctuator }
lots_of_real_code.c:64:3: keyword return
lots_of_real_code.c:64:10: constant 0
lots_of_real_code.c:64:11: punctuator ;
lots_of_real_code.c:65:1: punctuator }
lots_of_real_code.c:67:1: keyword int
lots_of_real_code.c:67:5: identifier main
lots_of_real_code.c:67:9: punctuator (
lots_of_real_code.c:67:10: punctuator )
lots_of_real_code.c:68:1: punctuator {
lots_of_real_code.c:69:3: keyword int
lots_of_real_code.c:69:7: identifier i
lots_of_real_code.c:69:8: punctuator ,
lots_of_real_code.c:69:10: identifier space
lots_of_real_code.c:69:15: punctuator ,
lots_of_real_code.c:69:17: identifier rows
lots_of_real_code.c:69:21: punctuator ,
lots_of_real_code.c:69:23: identifier k
lots_of_real_code.c:69:24: punctuator =
lots_of_real_code.c:69:25: constant 0
lots_of_real_code.c:69:26: punctuator ;
lots_of_real_code.c:71:3: identifier printf
lots_of_real_code.c:71:9: punctuator (
lots_of_real_code.c:71:10: string-literal "Enter number of rows: "
lots_of_real_code.c:71:34: punctuator )
lots_of_real_code.c:71:35: punctuator ;
lots_of_real_code.c:72:3: identifier scanf
lots_of_real_code.c:72:8: punctuator (
lots_of_real_code.c:72:9: string-literal "%d"
lots_of_real_code.c:72:13: punctuator ,
lots_of_real_code.c:72:14: punctuator &
lots_of_real_code.c:72:15: identifier rows
lots_of_real_code.c:72:19: punctuator )
lots_of_real_code.c:72:20: punctuator ;
lots_of_real_code.c:74:3: keyword for
lots_of_real_code.c:74:6: punctuator (
lots_of_real_code.c:74:7: identifier i
lots_of_real_code.c:74:8: punctuator =
lots_of_real_code.c:74:9: constant 1
lots_of_real_code.c:74:10: punctuator ;
lots_of_real_code.c:74:12: identifier i
lots_of_real_code.c:74:13: punctuator <=
lots_of_real_code.c:74:15: identifier rows
lots_of_real_code.c:74:19: punctuator ;
lots_of_real_code.c:74:21: punctuator ++
lots_of_real_code.c:74:23: identifier i
lots_of_real_code.c:74:24: punctuator ,
lots_of_real_code.c:74:26: identifier k
lots_of_real_code.c:74:27: punctuator =
lots_of_real_code.c:74:28: constant 0
lots_of_real_code.c:74:29: punctuator )
lots_of_real_code.c:75:3: punctuator {
lots_of_real_code.c:76:5: keyword for
lots_of_real_code.c:76:8: punctuator (
lots_of_real_code.c:76:9: identifier space
lots_of_real_code.c:76:14: punctuator =
lots_of_real_code.c:76:15: constant 1
lots_of_real_code.c:76:16: punctuator ;
lots_of_real_code.c:76:18: identifier space
lots_of_real_code.c:76:23: punctuator <=
lots_of_real_code.c:76:25: identifier rows
lots_of_real_code.c:76:29: punctuator -
lots_of_real_code.c:76:30: identifier i
lots_of_real_code.c:76:31: punctuator ;
lots_of_real_code.c:76:33: punctuator ++
lots_of_real_code.c:76:35: identifier space
lots_of_real_code.c:76:40: punctuator )
lots_of_real_code.c:77:5: punctuator {
lots_of_real_code.c:78:7: identifier printf
lots_of_real_code.c:78:13: punctuator (
lots_of_real_code.c:78:14: string-literal "  "
lots_of_real_code.c:78:18: punctuator )
lots_of_real_code.c:78:19: punctuator ;
lots_of_real_code.c:79:5: punctuator }
lots_of_real_code.c:81:5: keyword while
lots_of_real_code.c:81:10: punctuator (
lots_of_real_code.c:81:11: identifier k
lots_of_real_code.c:81:13: punctuator !=
lots_of_real_code.c:81:16: constant 2
lots_of_real_code.c:81:17: punctuator *
lots_of_real_code.c:81:18: identifier i
lots_of_real_code.c:81:19: punctuator -
lots_of_real_code.c:81:20: constant 1
lots_of_real_code.c:81:21: punctuator )
lots_of_real_code.c:82:5: punctuator {
lots_of_real_code.c:83:7: identifier printf
lots_of_real_code.c:83:13: punctuator (
lots_of_real_code.c:83:14: string-literal "* "
lots_of_real_code.c:83:18: punctuator )
lots_of_real_code.c:83:19: punctuator ;
lots_of_real_code.c:84:7: punctuator ++
lots_of_real_code.c:84:9: identifier k
lots_of_real_code.c:84:10: punctuator ;
lots_of_real_code.c:85:5: punctuator }
lots_of_real_code.c:87:5: identifier printf
lots_of_real_code.c:87:11: punctuator (
lots_of_real_code.c:87:12: string-literal "\n"
lots_of_real_code.c:87:16: punctuator )
lots_of_real_code.c:87:17: punctuator ;
lots_of_real_code.c:88:3: punctuator }
lots_of_real_code.c:90:3: keyword return
lots_of_real_code.c:90:10: constant 0
lots_of_real_code.c:90:11: punctuator ;
lots_of_real_code.c:91:1: punctuator }
lots_of_real_code.c:93:1: keyword int
lots_of_real_code.c:93:5: identifier main
lots_of_real_code.c:93:9: punctuator (
lots_of_real_code.c:93:10: punctuator )
lots_of_real_code.c:94:1: punctuator {
lots_of_real_code.c:95:3: keyword int
lots_of_real_code.c:95:7: identifier i
lots_of_real_code.c:95:8: punctuator ,
lots_of_real_code.c:95:10: identifier space
lots_of_real_code.c:95:15: punctuator ,
lots_of_real_code.c:95:17: identifier rows
lots_of_real_code.c:95:21: punctuator ,
lots_of_real_code.c:95:23: identifier k
lots_of_real_code.c:95:24: punctuator =
lots_of_real_code.c:95:25: constant 0
lots_of_real_code.c:95:26: punctuator ,
lots_of_real_code.c:95:28: identifier count
lots_of_real_code.c:95:34: punctuator =
lots_of_real_code.c:95:36: constant 0
lots_of_real_code.c:95:37: punctuator ,
lots_of_real_code.c:95:39: identifier count1
lots_of_real_code.c:95:46: punctuator =
lots_of_real_code.c:95:48: constant 0
lots_of_real_code.c:95:49: punctuator ;
lots_of_real_code.c:97:3: identifier printf
lots_of_real_code.c:97:9: punctuator (
lots_of_real_code.c:97:10: string-literal "Enter number of rows: "
lots_of_real_code.c:97:34: punctuator )
lots_of_real_code.c:97:35: punctuator ;
lots_of_real_code.c:98:3: identifier scanf
lots_of_real_code.c:98:8: punctuator (
lots_of_real_code.c:98:9: string-literal "%d"
lots_of_real_code.c:98:13: punctuator ,
lots_of_real_code.c:98:14: punctuator &
lots_of_real_code.c:98:15: identifier rows
lots_of_real_code.c:98:19: punctuator )
lots_of_real_code.c:98:20: punctuator ;
lots_of_real_code.c:100:3: keyword for
lots_of_real_code.c:100:6: punctuator (
lots_of_real_code.c:100:7: identifier i
lots_of_real_code.c:100:8: punctuator =
lots_of_real_code.c:100:9: constant 1
lots_of_real_code.c:100:10: punctuator ;
lots_of_real_code.c:100:12: identifier i
lots_of_real_code.c:100:13: punctuator <=
lots_of_real_code.c:100:15: identifier rows
lots_of_real_code.c:100:19: punctuator ;
lots_of_real_code.c:100:21: punctuator ++
lots_of_real_code.c:100:23: identifier i
lots_of_real_code.c:100:24: punctuator )
lots_of_real_code.c:101:3: punctuator {
lots_of_real_code.c:102:5: keyword for
lots_of_real_code.c:102:8: punctuator (
lots_of_real_code.c:102:9: identifier space
lots_of_real_code.c:102:14: punctuator =
lots_of_real_code.c:102:15: constant 1
lots_of_real_code.c:102:16: punctuator ;
lots_of_real_code.c:102:18: identifier space
lots_of_real_code.c:102:24: punctuator <=
lots_of_real_code.c:102:27: identifier rows
lots_of_real_code.c:102:31: punctuator -
lots_of_real_code.c:102:32: identifier i
lots_of_real_code.c:102:33: punctuator ;
lots_of_real_code.c:102:35: punctuator ++
lots_of_real_code.c:102:37: identifier space
lots_of_real_code.c:102:42: punctuator )
lots_of_real_code.c:103:5: punctuator {
lots_of_real_code.c:104:7: identifier printf
lots_of_real_code.c:104:13: punctuator (
lots_of_real_code.c:104:14: string-literal "  "
lots_of_real_code.c:104:18: punctuator )
lots_of_real_code.c:104:19: punctuator ;
lots_of_real_code.c:105:7: punctuator ++
lots_of_real_code.c:105:9: identifier count
lots_of_real_code.c:105:14: punctuator ;
lots_of_real_code.c:106:5: punctuator }
lots_of_real_code.c:108:5: keyword while
lots_of_real_code.c:108:10: punctuator (
lots_of_real_code.c:108:11: identifier k
lots_of_real_code.c:108:13: punctuator !=
lots_of_real_code.c:108:16: constant 2
lots_of_real_code.c:108:17: punctuator *
lots_of_real_code.c:108:18: identifier i
lots_of_real_code.c:108:19: punctuator -
lots_of_real_code.c:108:20: constant 1
lots_of_real_code.c:108:21: punctuator )
lots_of_real_code.c:109:5: punctuator {
lots_of_real_code.c:110:7: keyword if
lots_of_real_code.c:110:10: punctuator (
lots_of_real_code.c:110:11: identifier count
lots_of_real_code.c:110:17: punctuator <=
lots_of_real_code.c:110:20: identifier rows
lots_of_real_code.c:110:24: punctuator -
lots_of_real_code.c:110:25: constant 1
lots_of_real_code.c:110:26: punctuator )
lots_of_real_code.c:111:7: punctuator {
lots_of_real_code.c:112:9: identifier printf
lots_of_real_code.c:112:15: punctuator (
lots_of_real_code.c:112:16: string-literal "%d "
lots_of_real_code.c:112:21: punctuator ,
lots_of_real_code.c:112:23: identifier i
lots_of_real_code.c:112:24: punctuator +
lots_of_real_code.c:112:25: identifier k
lots_of_real_code.c:112:26: punctuator )
lots_of_real_code.c:112:27: punctuator ;
lots_of_real_code.c:113:9: punctuator ++
lots_of_real_code.c:113:11: identifier count
lots_of_real_code.c:113:16: punctuator ;
lots_of_real_code.c:114:7: punctuator }
lots_of_real_code.c:115:7: keyword else
lots_of_real_code.c:116:7: punctuator {
lots_of_real_code.c:117:9: punctuator ++
lots_of_real_code.c:117:11: identifier count1
lots_of_real_code.c:117:17: punctuator ;
lots_of_real_code.c:118:9: identifier printf
lots_of_real_code.c:118:15: punctuator (
lots_of_real_code.c:118:16: string-literal "%d "
lots_of_real_code.c:118:21: punctuator ,
lots_of_real_code.c:118:23: punctuator (
lots_of_real_code.c:118:24: identifier i
lots_of_real_code.c:118:25: punctuator +
lots_of_real_code.c:118:26: identifier k
lots_of_real_code.c:118:27: punctuator -
lots_of_real_code.c:118:28: constant 2
lots_of_real_code.c:118:29: punctuator *
lots_of_real_code.c:118:30: identifier count1
lots_of_real_code.c:118:36: punctuator )
lots_of_real_code.c:118:37: punctuator )
lots_of_real_code.c:118:38: punctuator ;
lots_of_real_code.c:119:7: punctuator }
lots_of_real_code.c:120:7: punctuator ++
lots_of_real_code.c:120:9: identifier k
lots_of_real_code.c:120:10: punctuator ;
lots_of_real_code.c:121:5: punctuator }
lots_of_real_code.c:122:5: identifier count1
lots_of_real_code.c:122:12: punctuator =
lots_of_real_code.c:122:14: identifier count
lots_of_real_code.c:122:20: punctuator =
lots_of_real_code.c:122:22: identifier k
lots_of_real_code.c:122:24: punctuator =
lots_of_real_code.c:122:26: constant 0
lots_of_real_code.c:122:27: punctuator ;
lots_of_real_code.c:124:5: identifier printf
lots_of_real_code.c:124:11: punctuator (
lots_of_real_code.c:124:12: string-literal "\n"
lots_of_real_code.c:124:16: punctuator )
lots_of_real_code.c:124:17: punctuator ;
lots_of_real_code.c:125:3: punctuator }
lots_of_real_code.c:126:3: keyword return
lots_of_real_code.c:126:10: constant 0
lots_of_real_code.c:126:11: punctuator ;
lots_of_real_code.c:127:1: punctuator }
lots_of_real_code.c:129:1: keyword int
lots_of_real_code.c:129:5: identifier main
lots_of_real_code.c:129:9: punctuator (
lots_of_real_code.c:129:10: punctuator )
lots_of_real_code.c:129:12: punctuator {
lots_of_real_code.c:130:3: identifier FILE
lots_of_real_code.c:130:8: punctuator *
lots_of_real_code.c:130:9: identifier fp
lots_of_real_code.c:130:11: punctuator ;
lots_of_real_code.c:131:3: keyword int
lots_of_real_code.c:131:7: identifier c
lots_of_real_code.c:131:8: punctuator ;
lots_of_real_code.c:132:3: identifier fp
lots_of_real_code.c:132:6: punctuator =
lots_of_real_code.c:132:8: identifier fopen
lots_of_real_code.c:132:13: punctuator (
lots_of_real_code.c:132:14: identifier __FILE__
lots_of_real_code.c:132:22: punctuator ,
lots_of_real_code.c:132:23: string-literal "r"
lots_of_real_code.c:132:26: punctuator )
lots_of_real_code.c:132:27: punctuator ;
lots_of_real_code.c:133:3: keyword do
lots_of_real_code.c:133:6: punctuator {
lots_of_real_code.c:134:5: identifier c
lots_of_real_code.c:134:7: punctuator =
lots_of_real_code.c:134:9: identifier getc
lots_of_real_code.c:134:13: punctuator (
lots_of_real_code.c:134:14: identifier fp
lots_of_real_code.c:134:16: punctuator )
lots_of_real_code.c:134:17: punctuator ;
lots_of_real_code.c:135:5: identifier putchar
lots_of_real_code.c:135:12: punctuator (
lots_of_real_code.c:135:13: identifier c
lots_of_real_code.c:135:14: punctuator )
lots_of_real_code.c:135:15: punctuator ;
lots_of_real_code.c:136:3: punctuator }
lots_of_real_code.c:137:3: keyword while
lots_of_real_code.c:137:8: punctuator (
lots_of_real_code.c:137:9: identifier c
lots_of_real_code.c:137:11: punctuator !=
lots_of_real_code.c:137:14: identifier EOF
lots_of_real_code.c:137:17: punctuator )
lots_of_real_code.c:137:18: punctuator ;
lots_of_real_code.c:138:3: identifier fclose
lots_of_real_code.c:138:9: punctuator (
lots_of_real_code.c:138:10: identifier fp
lots_of_real_code.c:138:12: punctuator )
lots_of_real_code.c:138:13: punctuator ;
lots_of_real_code.c:139:3: keyword return
lots_of_real_code.c:139:10: constant 0
lots_of_real_code.c:139:11: punctuator ;
lots_of_real_code.c:140:1: punctuator }
lots_of_real_code.c:142:1: keyword int
lots_of_real_code.c:142:5: identifier main
lots_of_real_code.c:142:9: punctuator (
lots_of_real_code.c:142:10: punctuator )
lots_of_real_code.c:143:1: punctuator {
lots_of_real_code.c:144:3: keyword int
lots_of_real_code.c:144:7: identifier low
lots_of_real_code.c:144:10: punctuator ,
lots_of_real_code.c:144:12: identifier high
lots_of_real_code.c:144:16: punctuator ,
lots_of_real_code.c:144:18: identifier i
lots_of_real_code.c:144:19: punctuator ,
lots_of_real_code.c:144:21: identifier flag
lots_of_real_code.c:144:25: punctuator ;
lots_of_real_code.c:145:3: identifier printf
lots_of_real_code.c:145:9: punctuator (
lots_of_real_code.c:145:10: string-literal "Enter two numbers(intervals): "
lots_of_real_code.c:145:42: punctuator )
lots_of_real_code.c:145:43: punctuator ;
lots_of_real_code.c:146:3: identifier scanf
lots_of_real_code.c:146:8: punctuator (
lots_of_real_code.c:146:9: string-literal "%d %d"
lots_of_real_code.c:146:16: punctuator ,
lots_of_real_code.c:146:18: punctuator &
lots_of_real_code.c:146:19: identifier low
lots_of_real_code.c:146:22: punctuator ,
lots_of_real_code.c:146:24: punctuator &
lots_of_real_code.c:146:25: identifier high
lots_of_real_code.c:146:29: punctuator )
lots_of_real_code.c:146:30: punctuator ;
lots_of_real_code.c:148:3: identifier printf
lots_of_real_code.c:148:9: punctuator (
lots_of_real_code.c:148:10: string-literal "Prime numbers between %d and %d are: "
lots_of_real_code.c:148:49: punctuator ,
lots_of_real_code.c:148:51: identifier low
lots_of_real_code.c:148:54: punctuator ,
lots_of_real_code.c:148:56: identifier high
lots_of_real_code.c:148:60: punctuator )
lots_of_real_code.c:148:61: punctuator ;
lots_of_real_code.c:150:3: keyword while
lots_of_real_code.c:150:9: punctuator (
lots_of_real_code.c:150:10: identifier low
lots_of_real_code.c:150:14: punctuator <
lots_of_real_code.c:150:16: identifier high
lots_of_real_code.c:150:20: punctuator )
lots_of_real_code.c:151:3: punctuator {
lots_of_real_code.c:152:5: identifier flag
lots_of_real_code.c:152:10: punctuator =
lots_of_real_code.c:152:12: constant 0
lots_of_real_code.c:152:13: punctuator ;
lots_of_real_code.c:154:5: keyword for
lots_of_real_code.c:154:8: punctuator (
lots_of_real_code.c:154:9: identifier i
lots_of_real_code.c:154:11: punctuator =
lots_of_real_code.c:154:13: constant 2
lots_of_real_code.c:154:14: punctuator ;
lots_of_real_code.c:154:16: identifier i
lots_of_real_code.c:154:18: punctuator <=
lots_of_real_code.c:154:21: identifier low
lots_of_real_code.c:154:24: punctuator /
lots_of_real_code.c:154:25: constant 2
lots_of_real_code.c:154:26: punctuator ;
lots_of_real_code.c:154:28: punctuator ++
lots_of_real_code.c:154:30: identifier i
lots_of_real_code.c:154:31: punctuator )
lots_of_real_code.c:155:5: punctuator {
lots_of_real_code.c:156:7: keyword if
lots_of_real_code.c:156:9: punctuator (
lots_of_real_code.c:156:10: identifier low
lots_of_real_code.c:156:14: punctuator %
lots_of_real_code.c:156:16: identifier i
lots_of_real_code.c:156:18: punctuator ==
lots_of_real_code.c:156:21: constant 0
lots_of_real_code.c:156:22: punctuator )
lots_of_real_code.c:157:7: punctuator {
lots_of_real_code.c:158:9: identifier flag
lots_of_real_code.c:158:14: punctuator =
lots_of_real_code.c:158:16: constant 1
lots_of_real_code.c:158:17: punctuator ;
lots_of_real_code.c:159:9: keyword break
lots_of_real_code.c:159:14: punctuator ;
lots_of_real_code.c:160:7: punctuator }
lots_of_real_code.c:161:5: punctuator }
lots_of_real_code.c:163:5: keyword if
lots_of_real_code.c:163:8: punctuator (
lots_of_real_code.c:163:9: identifier flag
lots_of_real_code.c:163:14: punctuator ==
lots_of_real_code.c:163:17: constant 0
lots_of_real_code.c:163:18: punctuator )
lots_of_real_code.c:164:7: identifier printf
lots_of_real_code.c:164:13: punctuator (
lots_of_real_code.c:164:14: string-literal "%d "
lots_of_real_code.c:164:19: punctuator ,
lots_of_real_code.c:164:21: identifier low
lots_of_real_code.c:164:24: punctuator )
lots_of_real_code.c:164:25: punctuator ;
lots_of_real_code.c:166:5: punctuator ++
lots_of_real_code.c:166:7: identifier low
lots_of_real_code.c:166:10: punctuator ;
lots_of_real_code.c:167:3: punctuator }
lots_of_real_code.c:169:3: keyword return
lots_of_real_code.c:169:10: constant 0
lots_of_real_code.c:169:11: punctuator ;
lots_of_real_code.c:170:1: punctuator }
lots_of_real_code.c:172:1: keyword int
lots_of_real_code.c:172:5: identifier main
lots_of_real_code.c:172:9: punctuator (
lots_of_real_code.c:172:10: punctuator )
lots_of_real_code.c:173:1: punctuator {
lots_of_real_code.c:174:3: keyword int
lots_of_real_code.c:174:7: identifier low
lots_of_real_code.c:174:10: punctuator ,
lots_of_real_code.c:174:12: identifier high
lots_of_real_code.c:174:16: punctuator ,
lots_of_real_code.c:174:18: identifier i
lots_of_real_code.c:174:19: punctuator ,
lots_of_real_code.c:174:21: identifier flag
lots_of_real_code.c:174:25: punctuator ,
lots_of_real_code.c:174:27: identifier temp
lots_of_real_code.c:174:31: punctuator ;
lots_of_real_code.c:175:3: identifier printf
lots_of_real_code.c:175:9: punctuator (
lots_of_real_code.c:175:10: string-literal "Enter two numbers(intevals): "
lots_of_real_code.c:175:41: punctuator )
lots_of_real_code.c:175:42: punctuator ;
lots_of_real_code.c:176:3: identifier scanf
lots_of_real_code.c:176:8: punctuator (
lots_of_real_code.c:176:9: string-literal "%d %d"
lots_of_real_code.c:176:16: punctuator ,
lots_of_real_code.c:176:18: punctuator &
lots_of_real_code.c:176:19: identifier low
lots_of_real_code.c:176:22: punctuator ,
lots_of_real_code.c:176:24: punctuator &
lots_of_real_code.c:176:25: identifier high
lots_of_real_code.c:176:29: punctuator )
lots_of_real_code.c:176:30: punctuator ;
lots_of_real_code.c:179:3: keyword if
lots_of_real_code.c:179:6: punctuator (
lots_of_real_code.c:179:7: identifier low
lots_of_real_code.c:179:11: punctuator >
lots_of_real_code.c:179:13: identifier high
lots_of_real_code.c:179:17: punctuator )
lots_of_real_code.c:179:19: punctuator {
lots_of_real_code.c:180:5: identifier temp
lots_of_real_code.c:180:10: punctuator =
lots_of_real_code.c:180:12: identifier low
lots_of_real_code.c:180:15: punctuator ;
lots_of_real_code.c:181:5: identifier low
lots_of_real_code.c:181:9: punctuator =
lots_of_real_code.c:181:11: identifier high
lots_of_real_code.c:181:15: punctuator ;
lots_of_real_code.c:182:5: identifier high
lots_of_real_code.c:182:10: punctuator =
lots_of_real_code.c:182:12: identifier temp
lots_of_real_code.c:182:16: punctuator ;
lots_of_real_code.c:183:3: punctuator }
lots_of_real_code.c:185:3: identifier printf
lots_of_real_code.c:185:9: punctuator (
lots_of_real_code.c:185:10: string-literal "Prime numbers between %d and %d are: "
lots_of_real_code.c:185:49: punctuator ,
lots_of_real_code.c:185:51: identifier low
lots_of_real_code.c:185:54: punctuator ,
lots_of_real_code.c:185:56: identifier high
lots_of_real_code.c:185:60: punctuator )
lots_of_real_code.c:185:61: punctuator ;
lots_of_real_code.c:187:3: keyword while
lots_of_real_code.c:187:9: punctuator (
lots_of_real_code.c:187:10: identifier low
lots_of_real_code.c:187:14: punctuator <
lots_of_real_code.c:187:16: identifier high
lots_of_real_code.c:187:20: punctuator )
lots_of_real_code.c:188:3: punctuator {
lots_of_real_code.c:189:5: identifier flag
lots_of_real_code.c:189:10: punctuator =
lots_of_real_code.c:189:12: constant 0
lots_of_real_code.c:189:13: punctuator ;
lots_of_real_code.c:191:5: keyword for
lots_of_real_code.c:191:8: punctuator (
lots_of_real_code.c:191:9: identifier i
lots_of_real_code.c:191:11: punctuator =
lots_of_real_code.c:191:13: constant 2
lots_of_real_code.c:191:14: punctuator ;
lots_of_real_code.c:191:16: identifier i
lots_of_real_code.c:191:18: punctuator <=
lots_of_real_code.c:191:21: identifier low
lots_of_real_code.c:191:24: punctuator /
lots_of_real_code.c:191:25: constant 2
lots_of_real_code.c:191:26: punctuator ;
lots_of_real_code.c:191:28: punctuator ++
lots_of_real_code.c:191:30: identifier i
lots_of_real_code.c:191:31: punctuator )
lots_of_real_code.c:192:5: punctuator {
lots_of_real_code.c:193:7: keyword if
lots_of_real_code.c:193:9: punctuator (
lots_of_real_code.c:193:10: identifier low
lots_of_real_code.c:193:14: punctuator %
lots_of_real_code.c:193:16: identifier i
lots_of_real_code.c:193:18: punctuator ==
lots_of_real_code.c:193:21: constant 0
lots_of_real_code.c:193:22: punctuator )
lots_of_real_code.c:194:7: punctuator {
lots_of_real_code.c:195:9: identifier flag
lots_of_real_code.c:195:14: punctuator =
lots_of_real_code.c:195:16: constant 1
lots_of_real_code.c:195:17: punctuator ;
lots_of_real_code.c:196:9: keyword break
lots_of_real_code.c:196:14: punctuator ;
lots_of_real_code.c:197:7: punctuator }
lots_of_real_code.c:198:5: punctuator }
lots_of_real_code.c:200:5: keyword if
lots_of_real_code.c:200:8: punctuator (
lots_of_real_code.c:200:9: identifier flag
lots_of_real_code.c:200:14: punctuator ==
lots_of_real_code.c:200:17: constant 0
lots_of_real_code.c:200:18: punctuator )
lots_of_real_code.c:201:7: identifier printf
lots_of_real_code.c:201:13: punctuator (
lots_of_real_code.c:201:14: string-literal "%d "
lots_of_real_code.c:201:19: punctuator ,
lots_of_real_code.c:201:21: identifier low
lots_of_real_code.c:201:24: punctuator )
lots_of_real_code.c:201:25: punctuator ;
lots_of_real_code.c:203:5: punctuator ++
lots_of_real_code.c:203:7: identifier low
lots_of_real_code.c:203:10: punctuator ;
lots_of_real_code.c:204:3: punctuator }
lots_of_real_code.c:206:3: keyword return
lots_of_real_code.c:206:10: constant 0
lots_of_real_code.c:206:11: punctuator ;
lots_of_real_code.c:207:1: punctuator }
lots_of_real_code.c:209:1: keyword int
lots_of_real_code.c:209:5: identifier main
lots_of_real_code.c:209:9: punctuator (
lots_of_real_code.c:209:10: punctuator )
lots_of_real_code.c:210:1: punctuator {
lots_of_real_code.c:211:3: keyword int
lots_of_real_code.c:211:7: identifier n1
lots_of_real_code.c:211:9: punctuator ,
lots_of_real_code.c:211:11: identifier n2
lots_of_real_code.c:211:13: punctuator ,
lots_of_real_code.c:211:15: identifier i
lots_of_real_code.c:211:16: punctuator ,
lots_of_real_code.c:211:18: identifier gcd
lots_of_real_code.c:211:21: punctuator ;
lots_of_real_code.c:213:3: identifier printf
lots_of_real_code.c:213:9: punctuator (
lots_of_real_code.c:213:10: string-literal "Enter two integers: "
lots_of_real_code.c:213:32: punctuator )
lots_of_real_code.c:213:33: punctuator ;
lots_of_real_code.c:214:3: identifier scanf
lots_of_real_code.c:214:8: punctuator (
lots_of_real_code.c:214:9: string-literal "%d %d"
lots_of_real_code.c:214:16: punctuator ,
lots_of_real_code.c:214:18: punctuator &
lots_of_real_code.c:214:19: identifier n1
lots_of_real_code.c:214:21: punctuator ,
lots_of_real_code.c:214:23: punctuator &
lots_of_real_code.c:214:24: identifier n2
lots_of_real_code.c:214:26: punctuator )
lots_of_real_code.c:214:27: punctuator ;
lots_of_real_code.c:216:3: keyword for
lots_of_real_code.c:216:6: punctuator (
lots_of_real_code.c:216:7: identifier i
lots_of_real_code.c:216:8: punctuator =
lots_of_real_code.c:216:9: constant 1
lots_of_real_code.c:216:10: punctuator ;
lots_of_real_code.c:216:12: identifier i
lots_of_real_code.c:216:14: punctuator <=
lots_of_real_code.c:216:17: identifier n1
lots_of_real_code.c:216:20: punctuator &&
lots_of_real_code.c:216:23: identifier i
lots_of_real_code.c:216:25: punctuator <=
lots_of_real_code.c:216:28: identifier n2
lots_of_real_code.c:216:30: punctuator ;
lots_of_real_code.c:216:32: punctuator ++
lots_of_real_code.c:216:34: identifier i
lots_of_real_code.c:216:35: punctuator )
lots_of_real_code.c:217:3: punctuator {
lots_of_real_code.c:219:5: keyword if
lots_of_real_code.c:219:7: punctuator (
lots_of_real_code.c:219:8: identifier n1
lots_of_real_code.c:219:10: punctuator %
lots_of_real_code.c:219:11: identifier i
lots_of_real_code.c:219:12: punctuator ==
lots_of_real_code.c:219:14: constant 0
lots_of_real_code.c:219:16: punctuator &&
lots_of_real_code.c:219:19: identifier n2
lots_of_real_code.c:219:21: punctuator %
lots_of_real_code.c:219:22: identifier i
lots_of_real_code.c:219:23: punctuator ==
lots_of_real_code.c:219:25: constant 0
lots_of_real_code.c:219:26: punctuator )
lots_of_real_code.c:220:7: identifier gcd
lots_of_real_code.c:220:11: punctuator =
lots_of_real_code.c:220:13: identifier i
lots_of_real_code.c:220:14: punctuator ;
lots_of_real_code.c:221:3: punctuator }
lots_of_real_code.c:223:3: identifier printf
lots_of_real_code.c:223:9: punctuator (
lots_of_real_code.c:223:10: string-literal "G.C.D of %d and %d is %d"
lots_of_real_code.c:223:36: punctuator ,
lots_of_real_code.c:223:38: identifier n1
lots_of_real_code.c:223:40: punctuator ,
lots_of_real_code.c:223:42: identifier n2
lots_of_real_code.c:223:44: punctuator ,
lots_of_real_code.c:223:46: identifier gcd
lots_of_real_code.c:223:49: punctuator )
lots_of_real_code.c:223:50: punctuator ;
lots_of_real_code.c:225:3: keyword return
lots_of_real_code.c:225:10: constant 0
lots_of_real_code.c:225:11: punctuator ;
lots_of_real_code.c:226:1: punctuator }
lots_of_real_code.c:228:1: keyword int
lots_of_real_code.c:228:5: identifier main
lots_of_real_code.c:228:9: punctuator (
lots_of_real_code.c:228:10: punctuator )
lots_of_real_code.c:229:1: punctuator {
lots_of_real_code.c:230:3: keyword int
lots_of_real_code.c:230:7: identifier n1
lots_of_real_code.c:230:9: punctuator ,
lots_of_real_code.c:230:11: identifier n2
lots_of_real_code.c:230:13: punctuator ;
lots_of_real_code.c:232:3: identifier printf
lots_of_real_code.c:232:9: punctuator (
lots_of_real_code.c:232:10: string-literal "Enter two positive integers: "
lots_of_real_code.c:232:41: punctuator )
lots_of_real_code.c:232:42: punctuator ;
lots_of_real_code.c:233:3: identifier scanf
lots_of_real_code.c:233:8: punctuator (
lots_of_real_code.c:233:9: string-literal "%d %d"
lots_of_real_code.c:233:16: punctuator ,
lots_of_real_code.c:233:17: punctuator &
lots_of_real_code.c:233:18: identifier n1
lots_of_real_code.c:233:20: punctuator ,
lots_of_real_code.c:233:21: punctuator &
lots_of_real_code.c:233:22: identifier n2
lots_of_real_code.c:233:24: punctuator )
lots_of_real_code.c:233:25: punctuator ;
lots_of_real_code.c:235:3: keyword while
lots_of_real_code.c:235:8: punctuator (
lots_of_real_code.c:235:9: identifier n1
lots_of_real_code.c:235:11: punctuator !=
lots_of_real_code.c:235:13: identifier n2
lots_of_real_code.c:235:15: punctuator )
lots_of_real_code.c:236:3: punctuator {
lots_of_real_code.c:237:5: keyword if
lots_of_real_code.c:237:7: punctuator (
lots_of_real_code.c:237:8: identifier n1
lots_of_real_code.c:237:11: punctuator >
lots_of_real_code.c:237:13: identifier n2
lots_of_real_code.c:237:15: punctuator )
lots_of_real_code.c:238:7: identifier n1
lots_of_real_code.c:238:10: punctuator -=
lots_of_real_code.c:238:13: identifier n2
lots_of_real_code.c:238:15: punctuator ;
lots_of_real_code.c:239:5: keyword else
lots_of_real_code.c:240:7: identifier n2
lots_of_real_code.c:240:10: punctuator -=
lots_of_real_code.c:240:13: identifier n1
lots_of_real_code.c:240:15: punctuator ;
lots_of_real_code.c:241:3: punctuator }
lots_of_real_code.c:242:3: identifier printf
lots_of_real_code.c:242:9: punctuator (
lots_of_real_code.c:242:10: string-literal "GCD = %d"
lots_of_real_code.c:242:20: punctuator ,
lots_of_real_code.c:242:21: identifier n1
lots_of_real_code.c:242:23: punctuator )
lots_of_real_code.c:242:24: punctuator ;
lots_of_real_code.c:244:3: keyword return
lots_of_real_code.c:244:10: constant 0
lots_of_real_code.c:244:11: punctuator ;
lots_of_real_code.c:245:1: punctuator }
lots_of_real_code.c:247:1: keyword int
lots_of_real_code.c:247:5: identifier main
lots_of_real_code.c:247:9: punctuator (
lots_of_real_code.c:247:10: punctuator )
lots_of_real_code.c:248:1: punctuator {
lots_of_real_code.c:249:3: keyword int
lots_of_real_code.c:249:7: identifier n1
lots_of_real_code.c:249:9: punctuator ,
lots_of_real_code.c:249:11: identifier n2
lots_of_real_code.c:249:13: punctuator ;
lots_of_real_code.c:251:3: identifier printf
lots_of_real_code.c:251:9: punctuator (
lots_of_real_code.c:251:10: string-literal "Enter two integers: "
lots_of_real_code.c:251:32: punctuator )
lots_of_real_code.c:251:33: punctuator ;
lots_of_real_code.c:252:3: identifier scanf
lots_of_real_code.c:252:8: punctuator (
lots_of_real_code.c:252:9: string-literal "%d %d"
lots_of_real_code.c:252:16: punctuator ,
lots_of_real_code.c:252:17: punctuator &
lots_of_real_code.c:252:18: identifier n1
lots_of_real_code.c:252:20: punctuator ,
lots_of_real_code.c:252:21: punctuator &
lots_of_real_code.c:252:22: identifier n2
lots_of_real_code.c:252:24: punctuator )
lots_of_real_code.c:252:25: punctuator ;
lots_of_real_code.c:255:3: identifier n1
lots_of_real_code.c:255:6: punctuator =
lots_of_real_code.c:255:8: punctuator (
lots_of_real_code.c:255:10: identifier n1
lots_of_real_code.c:255:13: punctuator >
lots_of_real_code.c:255:15: constant 0
lots_of_real_code.c:255:16: punctuator )
lots_of_real_code.c:255:18: punctuator ?
lots_of_real_code.c:255:20: identifier n1
lots_of_real_code.c:255:23: punctuator :
lots_of_real_code.c:255:25: punctuator -
lots_of_real_code.c:255:26: identifier n1
lots_of_real_code.c:255:28: punctuator ;
lots_of_real_code.c:256:3: identifier n2
lots_of_real_code.c:256:6: punctuator =
lots_of_real_code.c:256:8: punctuator (
lots_of_real_code.c:256:10: identifier n2
lots_of_real_code.c:256:13: punctuator >
lots_of_real_code.c:256:15: constant 0
lots_of_real_code.c:256:16: punctuator )
lots_of_real_code.c:256:18: punctuator ?
lots_of_real_code.c:256:20: identifier n2
lots_of_real_code.c:256:23: punctuator :
lots_of_real_code.c:256:25: punctuator -
lots_of_real_code.c:256:26: identifier n2
lots_of_real_code.c:256:28: punctuator ;
lots_of_real_code.c:258:3: keyword while
lots_of_real_code.c:258:8: punctuator (
lots_of_real_code.c:258:9: identifier n1
lots_of_real_code.c:258:11: punctuator !=
lots_of_real_code.c:258:13: identifier n2
lots_of_real_code.c:258:15: punctuator )
lots_of_real_code.c:259:3: punctuator {
lots_of_real_code.c:260:5: keyword if
lots_of_real_code.c:260:7: punctuator (
lots_of_real_code.c:260:8: identifier n1
lots_of_real_code.c:260:11: punctuator >
lots_of_real_code.c:260:13: identifier n2
lots_of_real_code.c:260:15: punctuator )
lots_of_real_code.c:261:7: identifier n1
lots_of_real_code.c:261:10: punctuator -=
lots_of_real_code.c:261:13: identifier n2
lots_of_real_code.c:261:15: punctuator ;
lots_of_real_code.c:262:5: keyword else
lots_of_real_code.c:263:7: identifier n2
lots_of_real_code.c:263:10: punctuator -=
lots_of_real_code.c:263:13: identifier n1
lots_of_real_code.c:263:15: punctuator ;
lots_of_real_code.c:264:3: punctuator }
lots_of_real_code.c:265:3: identifier printf
lots_of_real_code.c:265:9: punctuator (
lots_of_real_code.c:265:10: string-literal "GCD = %d"
lots_of_real_code.c:265:20: punctuator ,
lots_of_real_code.c:265:21: identifier n1
lots_of_real_code.c:265:23: punctuator )
lots_of_real_code.c:265:24: punctuator ;
lots_of_real_code.c:267:3: keyword return
lots_of_real_code.c:267:10: constant 0
lots_of_real_code.c:267:11: punctuator ;
lots_of_real_code.c:268:1: punctuator }
lots_of_real_code.c:270:1: keyword enum
lots_of_real_code.c:270:6: punctuator {
lots_of_real_code.c:287:7: identifier POOL_MANAGER_ACTIVE
lots_of_real_code.c:287:27: punctuator =
lots_of_real_code.c:287:29: constant 1
lots_of_real_code.c:287:31: punctuator <<
lots_of_real_code.c:287:34: constant 0
lots_of_real_code.c:287:35: punctuator ,
lots_of_real_code.c:288:3: identifier POOL_DISASSOCIATED
lots_of_real_code.c:288:22: punctuator =
lots_of_real_code.c:288:24: constant 1
lots_of_real_code.c:288:26: punctuator <<
lots_of_real_code.c:288:29: constant 2
lots_of_real_code.c:288:30: punctuator ,
lots_of_real_code.c:291:7: identifier WORKER_DIE
lots_of_real_code.c:291:19: punctuator =
lots_of_real_code.c:291:21: constant 1
lots_of_real_code.c:291:23: punctuator <<
lots_of_real_code.c:291:26: constant 1
lots_of_real_code.c:291:27: punctuator ,
lots_of_real_code.c:292:3: identifier WORKER_IDLE
lots_of_real_code.c:292:16: punctuator =
lots_of_real_code.c:292:18: constant 1
lots_of_real_code.c:292:20: punctuator <<
lots_of_real_code.c:292:23: constant 2
lots_of_real_code.c:292:24: punctuator ,
lots_of_real_code.c:293:3: identifier WORKER_PREP
lots_of_real_code.c:293:16: punctuator =
lots_of_real_code.c:293:18: constant 1
lots_of_real_code.c:293:20: punctuator <<
lots_of_real_code.c:293:23: constant 3
lots_of_real_code.c:293:24: punctuator ,
lots_of_real_code.c:294:3: identifier WORKER_CPU_INTENSIVE
lots_of_real_code.c:294:24: punctuator =
lots_of_real_code.c:294:26: constant 1
lots_of_real_code.c:294:28: punctuator <<
lots_of_real_code.c:294:31: constant 6
lots_of_real_code.c:294:32: punctuator ,
lots_of_real_code.c:295:3: identifier WORKER_UNBOUND
lots_of_real_code.c:295:19: punctuator =
lots_of_real_code.c:295:21: constant 1
lots_of_real_code.c:295:23: punctuator <<
lots_of_real_code.c:295:26: constant 7
lots_of_real_code.c:295:27: punctuator ,
lots_of_real_code.c:296:3: identifier WORKER_REBOUND
lots_of_real_code.c:296:19: punctuator =
lots_of_real_code.c:296:21: constant 1
lots_of_real_code.c:296:23: punctuator <<
lots_of_real_code.c:296:26: constant 8
lots_of_real_code.c:296:27: punctuator ,
lots_of_real_code.c:298:3: identifier WORKER_NOT_RUNNING
lots_of_real_code.c:298:22: punctuator =
lots_of_real_code.c:298:24: identifier WORKER_PREP
lots_of_real_code.c:298:36: punctuator |
lots_of_real_code.c:298:38: identifier WORKER_CPU_INTENSIVE
lots_of_real_code.c:298:59: punctuator |
lots_of_real_code.c:299:7: identifier WORKER_UNBOUND
lots_of_real_code.c:299:22: punctuator |
lots_of_real_code.c:299:24: identifier WORKER_REBOUND
lots_of_real_code.c:299:38: punctuator ,
lots_of_real_code.c:301:3: identifier NR_STD_WORKER_POOLS
lots_of_real_code.c:301:23: punctuator =
lots_of_real_code.c:301:25: constant 2
lots_of_real_code.c:301:26: punctuator ,
lots_of_real_code.c:303:3: identifier UNBOUND_POOL_HASH_ORDER
lots_of_real_code.c:303:27: punctuator =
lots_of_real_code.c:303:29: constant 6
lots_of_real_code.c:303:30: punctuator ,
lots_of_real_code.c:304:3: identifier BUSY_WORKER_HASH_ORDER
lots_of_real_code.c:304:26: punctuator =
lots_of_real_code.c:304:28: constant 6
lots_of_real_code.c:304:29: punctuator ,
lots_of_real_code.c:306:3: identifier MAX_IDLE_WORKERS_RATIO
lots_of_real_code.c:306:26: punctuator =
lots_of_real_code.c:306:28: constant 4
lots_of_real_code.c:306:29: punctuator ,
lots_of_real_code.c:307:3: identifier IDLE_WORKER_TIMEOUT
lots_of_real_code.c:307:23: punctuator =
lots_of_real_code.c:307:25: constant 300
lots_of_real_code.c:307:29: punctuator *
lots_of_real_code.c:307:31: identifier HZ
lots_of_real_code.c:307:33: punctuator ,
lots_of_real_code.c:309:3: identifier MAYDAY_INITIAL_TIMEOUT
lots_of_real_code.c:309:27: punctuator =
lots_of_real_code.c:309:29: identifier HZ
lots_of_real_code.c:309:32: punctuator /
lots_of_real_code.c:309:34: constant 100
lots_of_real_code.c:309:38: punctuator >=
lots_of_real_code.c:309:41: constant 2
lots_of_real_code.c:309:43: punctuator ?
lots_of_real_code.c:309:45: identifier HZ
lots_of_real_code.c:309:48: punctuator /
lots_of_real_code.c:309:50: constant 100
lots_of_real_code.c:309:54: punctuator :
lots_of_real_code.c:309:56: constant 2
lots_of_real_code.c:309:57: punctuator ,
lots_of_real_code.c:312:7: identifier MAYDAY_INTERVAL
lots_of_real_code.c:312:24: punctuator =
lots_of_real_code.c:312:26: identifier HZ
lots_of_real_code.c:312:29: punctuator /
lots_of_real_code.c:312:31: constant 10
lots_of_real_code.c:312:33: punctuator ,
lots_of_real_code.c:313:3: identifier CREATE_COOLDOWN
lots_of_real_code.c:313:20: punctuator =
lots_of_real_code.c:313:22: identifier HZ
lots_of_real_code.c:313:24: punctuator ,
lots_of_real_code.c:319:7: identifier RESCUER_NICE_LEVEL
lots_of_real_code.c:319:26: punctuator =
lots_of_real_code.c:319:28: identifier MIN_NICE
lots_of_real_code.c:319:36: punctuator ,
lots_of_real_code.c:320:3: identifier HIGHPRI_NICE_LEVEL
lots_of_real_code.c:320:22: punctuator =
lots_of_real_code.c:320:24: identifier MIN_NICE
lots_of_real_code.c:320:32: punctuator ,
lots_of_real_code.c:322:3: identifier WQ_NAME_LEN
lots_of_real_code.c:322:16: punctuator =
lots_of_real_code.c:322:18: constant 24
lots_of_real_code.c:322:20: punctuator ,
lots_of_real_code.c:323:1: punctuator }
lots_of_real_code.c:323:2: punctuator ;
lots_of_real_code.c:361:1: keyword struct
lots_of_real_code.c:361:8: identifier worker_pool
lots_of_real_code.c:361:20: punctuator {
lots_of_real_code.c:362:3: identifier spinlock_t
lots_of_real_code.c:362:15: identifier lock
lots_of_real_code.c:362:19: punctuator ;
lots_of_real_code.c:363:3: keyword int
lots_of_real_code.c:363:9: identifier cpu
lots_of_real_code.c:363:12: punctuator ;
lots_of_real_code.c:364:3: keyword int
lots_of_real_code.c:364:9: identifier node
lots_of_real_code.c:364:13: punctuator ;
lots_of_real_code.c:365:3: keyword int
lots_of_real_code.c:365:9: identifier id
lots_of_real_code.c:365:11: punctuator ;
lots_of_real_code.c:366:3: keyword unsigned
lots_of_real_code.c:366:12: keyword int
lots_of_real_code.c:366:17: identifier flags
lots_of_real_code.c:366:22: punctuator ;
lots_of_real_code.c:368:3: keyword unsigned
lots_of_real_code.c:368:12: keyword long
lots_of_real_code.c:368:18: identifier watchdog_ts
lots_of_real_code.c:368:29: punctuator ;
lots_of_real_code.c:370:3: keyword struct
lots_of_real_code.c:370:10: identifier list_head
lots_of_real_code.c:370:20: identifier worklist
lots_of_real_code.c:370:28: punctuator ;
lots_of_real_code.c:372:3: keyword int
lots_of_real_code.c:372:9: identifier nr_workers
lots_of_real_code.c:372:19: punctuator ;
lots_of_real_code.c:373:3: keyword int
lots_of_real_code.c:373:9: identifier nr_idle
lots_of_real_code.c:373:16: punctuator ;
lots_of_real_code.c:375:3: keyword struct
lots_of_real_code.c:375:10: identifier list_head
lots_of_real_code.c:375:20: identifier idle_list
lots_of_real_code.c:375:29: punctuator ;
lots_of_real_code.c:376:3: keyword struct
lots_of_real_code.c:376:10: identifier timer_list
lots_of_real_code.c:376:21: identifier idle_timer
lots_of_real_code.c:376:31: punctuator ;
lots_of_real_code.c:377:3: keyword struct
lots_of_real_code.c:377:10: identifier timer_list
lots_of_real_code.c:377:21: identifier mayday_timer
lots_of_real_code.c:377:33: punctuator ;
lots_of_real_code.c:380:3: identifier DECLARE_HASHTABLE
lots_of_real_code.c:380:20: punctuator (
lots_of_real_code.c:380:21: identifier busy_hash
lots_of_real_code.c:380:30: punctuator ,
lots_of_real_code.c:380:32: identifier BUSY_WORKER_HASH_ORDER
lots_of_real_code.c:380:54: punctuator )
lots_of_real_code.c:380:55: punctuator ;
lots_of_real_code.c:383:3: keyword struct
lots_of_real_code.c:383:10: identifier worker
lots_of_real_code.c:383:18: punctuator *
lots_of_real_code.c:383:19: identifier manager
lots_of_real_code.c:383:26: punctuator ;
lots_of_real_code.c:384:3: keyword struct
lots_of_real_code.c:384:10: identifier list_head
lots_of_real_code.c:384:20: identifier workers
lots_of_real_code.c:384:27: punctuator ;
lots_of_real_code.c:385:3: keyword struct
lots_of_real_code.c:385:10: identifier completion
lots_of_real_code.c:385:21: punctuator *
lots_of_real_code.c:385:22: identifier detach_completion
lots_of_real_code.c:385:39: punctuator ;
lots_of_real_code.c:387:3: keyword struct
lots_of_real_code.c:387:10: identifier ida
lots_of_real_code.c:387:15: identifier worker_ida
lots_of_real_code.c:387:25: punctuator ;
lots_of_real_code.c:389:3: keyword struct
lots_of_real_code.c:389:10: identifier workqueue_attrs
lots_of_real_code.c:389:26: punctuator *
lots_of_real_code.c:389:27: identifier attrs
lots_of_real_code.c:389:32: punctuator ;
lots_of_real_code.c:390:3: keyword struct
lots_of_real_code.c:390:10: identifier hlist_node
lots_of_real_code.c:390:21: identifier hash_node
lots_of_real_code.c:390:30: punctuator ;
lots_of_real_code.c:391:3: keyword int
lots_of_real_code.c:391:9: identifier refcnt
lots_of_real_code.c:391:15: punctuator ;
lots_of_real_code.c:398:3: identifier atomic_t
lots_of_real_code.c:398:13: identifier nr_running
lots_of_real_code.c:398:24: identifier ____cacheline_aligned_in_smp
lots_of_real_code.c:398:52: punctuator ;
lots_of_real_code.c:404:3: keyword struct
lots_of_real_code.c:404:10: identifier rcu_head
lots_of_real_code.c:404:20: identifier rcu
lots_of_real_code.c:404:23: punctuator ;
lots_of_real_code.c:405:1: punctuator }
lots_of_real_code.c:405:3: identifier ____cacheline_aligned_in_smp
lots_of_real_code.c:405:31: punctuator ;
lots_of_real_code.c:413:1: keyword struct
lots_of_real_code.c:413:8: identifier pool_workqueue
lots_of_real_code.c:413:23: punctuator {
lots_of_real_code.c:414:3: keyword struct
lots_of_real_code.c:414:10: identifier worker_pool
lots_of_real_code.c:414:22: punctuator *
lots_of_real_code.c:414:23: identifier pool
lots_of_real_code.c:414:27: punctuator ;
lots_of_real_code.c:415:3: keyword struct
lots_of_real_code.c:415:10: identifier workqueue_struct
lots_of_real_code.c:415:27: punctuator *
lots_of_real_code.c:415:28: identifier wq
lots_of_real_code.c:415:30: punctuator ;
lots_of_real_code.c:416:3: keyword int
lots_of_real_code.c:416:9: identifier work_color
lots_of_real_code.c:416:19: punctuator ;
lots_of_real_code.c:417:3: keyword int
lots_of_real_code.c:417:9: identifier flush_color
lots_of_real_code.c:417:20: punctuator ;
lots_of_real_code.c:418:3: keyword int
lots_of_real_code.c:418:9: identifier refcnt
lots_of_real_code.c:418:15: punctuator ;
lots_of_real_code.c:419:3: keyword int
lots_of_real_code.c:419:9: identifier nr_in_flight
lots_of_real_code.c:419:21: punctuator [
lots_of_real_code.c:419:22: identifier WORK_NR_COLORS
lots_of_real_code.c:419:36: punctuator ]
lots_of_real_code.c:419:37: punctuator ;
lots_of_real_code.c:421:3: keyword int
lots_of_real_code.c:421:9: identifier nr_active
lots_of_real_code.c:421:18: punctuator ;
lots_of_real_code.c:422:3: keyword int
lots_of_real_code.c:422:9: identifier max_active
lots_of_real_code.c:422:19: punctuator ;
lots_of_real_code.c:423:3: keyword struct
lots_of_real_code.c:423:10: identifier list_head
lots_of_real_code.c:423:20: identifier delayed_works
lots_of_real_code.c:423:33: punctuator ;
lots_of_real_code.c:424:3: keyword struct
lots_of_real_code.c:424:10: identifier list_head
lots_of_real_code.c:424:20: identifier pwqs_node
lots_of_real_code.c:424:29: punctuator ;
lots_of_real_code.c:425:3: keyword struct
lots_of_real_code.c:425:10: identifier list_head
lots_of_real_code.c:425:20: identifier mayday_node
lots_of_real_code.c:425:31: punctuator ;
lots_of_real_code.c:433:3: keyword struct
lots_of_real_code.c:433:10: identifier work_struct
lots_of_real_code.c:433:22: identifier unbound_release_work
lots_of_real_code.c:433:42: punctuator ;
lots_of_real_code.c:434:3: keyword struct
lots_of_real_code.c:434:10: identifier rcu_head
lots_of_real_code.c:434:20: identifier rcu
lots_of_real_code.c:434:23: punctuator ;
lots_of_real_code.c:435:1: punctuator }
lots_of_real_code.c:435:3: identifier __aligned
lots_of_real_code.c:435:12: punctuator (
lots_of_real_code.c:435:13: constant 1
lots_of_real_code.c:435:15: punctuator <<
lots_of_real_code.c:435:18: identifier WORK_STRUCT_FLAG_BITS
lots_of_real_code.c:435:39: punctuator )
lots_of_real_code.c:435:40: punctuator ;
lots_of_real_code.c:440:1: keyword struct
lots_of_real_code.c:440:8: identifier wq_flusher
lots_of_real_code.c:440:19: punctuator {
lots_of_real_code.c:441:3: keyword struct
lots_of_real_code.c:441:10: identifier list_head
lots_of_real_code.c:441:20: identifier list
lots_of_real_code.c:441:24: punctuator ;
lots_of_real_code.c:442:3: keyword int
lots_of_real_code.c:442:9: identifier flush_color
lots_of_real_code.c:442:20: punctuator ;
lots_of_real_code.c:443:3: keyword struct
lots_of_real_code.c:443:10: identifier completion
lots_of_real_code.c:443:21: identifier done
lots_of_real_code.c:443:25: punctuator ;
lots_of_real_code.c:444:1: punctuator }
lots_of_real_code.c:444:2: punctuator ;
lots_of_real_code.c:446:1: keyword struct
lots_of_real_code.c:446:8: identifier wq_device
lots_of_real_code.c:446:17: punctuator ;
